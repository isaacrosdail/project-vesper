# Uses existing container name & credentials
# Keeps current dbs we already have set up
services:
  db:
    build:
      context: . # why the period here?
      dockerfile: Dockerfile.postgres
    container_name: vesper-db-prod
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata-prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro # :ro is read-only, which is good practice for init scripts
    healthcheck:
      # The actual command to run inside the container
      test: ["CMD-SHELL", "pg_isready"] # returns 'accepting connections' if up
      interval: 30s     # How often to run the health check (default: 30s)
      timeout: 5s       # Max time to wait for the command to finish (default: 30s)
      start-period: 10s # Grace period after container starts before failures count (default: 0s)
      retries: 3        # Allowed consecutive failures before marking unhealthy (default: 3)

  web:
    # New service for the Flask app itself
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - db
    environment:
      - DATABASE_URI=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - APP_ENV=prod
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 5s
      start-period: 10s
      retries: 3


volumes:
  pgdata-prod:
    name: vesper-pgdata-prod