"""Make priority nullable & remove default, add frog/priority constraint, add other constraints manually

Revision ID: b6625db1ca91
Revises: 47871059c404
Create Date: 2025-10-05 22:14:34.078189

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b6625db1ca91'
down_revision: Union[str, None] = '47871059c404'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('task', 'priority',
               existing_type=postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', name='priority_enum'),
               nullable=True)

    # Manually removing defaults

    # LeetCodeRecord
    op.alter_column('leetcoderecord', 'status', server_default=None)
    op.alter_column('leetcoderecord', 'difficulty', server_default=None)
    op.alter_column('leetcoderecord', 'language', server_default=None)

    # Product
    op.alter_column('product', 'category', server_default=None)


    # Manually adding check constraints because op.create_check_constraint is broken & prepends "ck_{table}" (just...why??)

    # Product
    op.execute('ALTER TABLE product ADD CONSTRAINT ck_product_calories_non_negative CHECK (calories_per_100g >= 0)')

    # Transaction
    op.execute('ALTER TABLE transaction ADD CONSTRAINT ck_transaction_price_non_negative CHECK (price_at_scan >= 0)')
    op.execute('ALTER TABLE transaction ADD CONSTRAINT ck_transaction_quantity_positive CHECK (quantity > 0)')

    # ShoppingListItem
    op.execute('ALTER TABLE shoppinglistitem ADD CONSTRAINT ck_shopping_quantity_wanted_positive CHECK (quantity_wanted > 0)')

    # Habit
    op.execute('ALTER TABLE habit ADD CONSTRAINT ck_promotion_threshold_range_0_1 CHECK (promotion_threshold IS NULL OR (promotion_threshold >= 0.0 AND promotion_threshold <= 1.0))')

    # DailyEntry
    op.execute('ALTER TABLE dailyentry ADD CONSTRAINT ck_weight_positive CHECK (weight > 0)')
    op.execute('ALTER TABLE dailyentry ADD CONSTRAINT ck_steps_non_negative CHECK (steps >= 0)')
    op.execute('ALTER TABLE dailyentry ADD CONSTRAINT ck_calories_non_negative CHECK (calories >= 0)')

    # Task
    op.execute('ALTER TABLE task ADD CONSTRAINT ck_task_frog_requires_due_date CHECK (NOT is_frog OR due_date IS NOT NULL)')
    op.execute('ALTER TABLE task ADD CONSTRAINT ck_frog_priority_mutually_exclusive CHECK ((is_frog = true AND priority IS NULL) OR (is_frog = false AND priority IS NOT NULL))')

    # TimeEntry
    op.execute('ALTER TABLE timeentry DROP CONSTRAINT IF EXISTS ch_time_entry_duration_positive')
    op.execute('ALTER TABLE timeentry ADD CONSTRAINT ck_ended_after_started CHECK (ended_at > started_at)')
    op.execute('ALTER TABLE timeentry ADD CONSTRAINT ck_time_entry_category_non_empty CHECK (length(category) > 0)')
    op.execute('ALTER TABLE timeentry ADD CONSTRAINT ck_time_entry_duration_positive CHECK (duration_minutes > 0)')



def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('task', 'priority',
               existing_type=postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', name='priority_enum'),
               nullable=False)

    # Manually adding CheckConstraints

    # TimeEntry
    op.drop_constraint('ck_time_entry_duration_positive', 'timeentry')
    op.drop_constraint('ck_time_entry_category_non_empty', 'timeentry')
    op.drop_constraint('ck_ended_after_started', 'timeentry')
    
    # Task
    op.drop_constraint('ck_frog_priority_mutually_exclusive', 'task')
    op.drop_constraint('ck_task_frog_requires_due_date', 'task')
    
    # DailyEntry
    op.drop_constraint('ck_calories_non_negative', 'dailyentry')
    op.drop_constraint('ck_steps_non_negative', 'dailyentry')
    op.drop_constraint('ck_weight_positive', 'dailyentry')
    
    # Habit
    op.drop_constraint('ck_promotion_threshold_range_0_1', 'habit')
    
    # ShoppingListItem
    op.drop_constraint('ck_shopping_quantity_wanted_positive', 'shoppinglistitem')
    
    # Transaction
    op.drop_constraint('ck_transaction_quantity_positive', 'transaction')
    op.drop_constraint('ck_transaction_price_non_negative', 'transaction')
    
    # Product
    op.drop_constraint('ck_product_calories_non_negative', 'product')
    # ### end Alembic commands ###
