"""Replace unique=True's with UniqueConstraints (unique to user, not app)

Revision ID: a100b7776f1d
Revises: a014ce252637
Create Date: 2025-10-04 20:02:51.178309

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a100b7776f1d'
down_revision: Union[str, None] = 'a014ce252637'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('habit_name_key'), 'habit', type_='unique')
    op.create_unique_constraint('uq_user_habit_name', 'habit', ['user_id', 'name'])
    op.drop_constraint(op.f('product_barcode_key'), 'product', type_='unique')
    op.create_unique_constraint('uq_user_product_barcode', 'product', ['user_id', 'barcode'])
    op.create_unique_constraint('uq_user_product_name', 'product', ['user_id', 'name'])
    op.drop_constraint(op.f('tag_name_key'), 'tag', type_='unique')
    op.create_unique_constraint('uq_user_tag_name', 'tag', ['user_id', 'name'])
    op.drop_constraint(op.f('task_name_key'), 'task', type_='unique')
    op.create_unique_constraint('uq_user_task_name', 'task', ['user_id', 'name'])
    op.drop_constraint(op.f('user_username_key'), 'user', type_='unique')
    op.create_unique_constraint(op.f('uq_user_username'), 'user', ['username'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq_user_username'), 'user', type_='unique')
    op.create_unique_constraint(op.f('user_username_key'), 'user', ['username'], postgresql_nulls_not_distinct=False)
    op.drop_constraint('uq_user_task_name', 'task', type_='unique')
    op.create_unique_constraint(op.f('task_name_key'), 'task', ['name'], postgresql_nulls_not_distinct=False)
    op.drop_constraint('uq_user_tag_name', 'tag', type_='unique')
    op.create_unique_constraint(op.f('tag_name_key'), 'tag', ['name'], postgresql_nulls_not_distinct=False)
    op.drop_constraint('uq_user_product_name', 'product', type_='unique')
    op.drop_constraint('uq_user_product_barcode', 'product', type_='unique')
    op.create_unique_constraint(op.f('product_barcode_key'), 'product', ['barcode'], postgresql_nulls_not_distinct=False)
    op.drop_constraint('uq_user_habit_name', 'habit', type_='unique')
    op.create_unique_constraint(op.f('habit_name_key'), 'habit', ['name'], postgresql_nulls_not_distinct=False)
    # ### end Alembic commands ###
