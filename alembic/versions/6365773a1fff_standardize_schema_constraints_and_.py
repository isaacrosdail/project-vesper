"""Standardize schema constraints and field definitions

Revision ID: 6365773a1fff
Revises: a4934c137134
Create Date: 2025-09-26 18:52:27.329738

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6365773a1fff'
down_revision: Union[str, None] = 'a4934c137134'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Create enum types first
    op.execute("CREATE TYPE status_enum AS ENUM ('EXPERIMENTAL', 'ESTABLISHED')")
    op.execute("CREATE TYPE difficulty_enum AS ENUM ('EASY', 'MEDIUM', 'HARD')")
    op.execute("CREATE TYPE language_enum AS ENUM ('PYTHON', 'JS', 'CPP', 'C')")
    op.execute("CREATE TYPE lcstatus_enum AS ENUM ('SOLVED', 'ATTEMPTED', 'REVIEWED')")
    op.execute("CREATE TYPE priority_enum AS ENUM ('LOW', 'MEDIUM', 'HIGH')")
    op.execute("CREATE TYPE user_role_enum AS ENUM ('OWNER', 'ADMIN', 'USER')")
    op.execute("CREATE TYPE user_lang_enum AS ENUM ('EN', 'DE')")
    op.execute("CREATE TYPE product_category_enum AS ENUM ('FRUITS', 'VEGETABLES', 'LEGUMES', 'GRAINS', 'BAKERY', 'DAIRY_EGGS', 'MEATS', 'SEAFOOD', 'FATS_OILS', 'SNACKS', 'SWEETS', 'BEVERAGES', 'CONDIMENTS_SAUCES', 'PROCESSED_CONVENIENCE', 'SUPPLEMENTS')")

    op.drop_constraint(op.f('apicallrecord_api_called_date_key'), 'apicallrecord', type_='unique')
    op.create_unique_constraint('uq_api_called_date', 'apicallrecord', ['api_called', 'date'])
    op.alter_column('dailyentry', 'weight',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=5, scale=2),
               existing_nullable=True)
    
    # Drop old (moving from Times to DateTimes)
    op.drop_column('dailyentry', 'wake_time')
    op.drop_column('dailyentry', 'sleep_time')
    op.add_column('dailyentry', sa.Column('wake_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('dailyentry', sa.Column('sleep_time', sa.DateTime(timezone=True), nullable=True))

    op.alter_column('habit', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    
    # Drop prior enum-based columns
    op.drop_column('habit', 'status')
    op.drop_column('leetcoderecord', 'difficulty')
    op.drop_column('leetcoderecord', 'language')
    op.drop_column('leetcoderecord', 'status')
    op.drop_column('task', 'priority')
    op.drop_column('user', 'role')
    op.drop_column('user', 'lang')

    # Drop old enum types
    op.execute('DROP TYPE IF EXISTS difficulty')
    op.execute('DROP TYPE IF EXISTS language')
    op.execute('DROP TYPE IF EXISTS lcstatus')
    op.execute('DROP TYPE IF EXISTS priority')
    op.execute('DROP TYPE IF EXISTS status')

    op.add_column('habit', sa.Column('status',
                                     sa.Enum('EXPERIMENTAL', 'ESTABLISHED', name='status_enum'),
                                     nullable=False,
                                     default='EXPERIMENTAL',
                                     server_default='EXPERIMENTAL'))


    op.alter_column('habitcompletion', 'habit_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('leetcoderecord', 'title',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=True)
    

    op.add_column('leetcoderecord', sa.Column('difficulty', 
                                            sa.Enum('EASY', 'MEDIUM', 'HARD', name='difficulty_enum'), 
                                            nullable=False,
                                            default='MEDIUM',
                                            server_default='MEDIUM'))
    op.add_column('leetcoderecord', sa.Column('language', 
                                            sa.Enum('PYTHON', 'JS', 'CPP', 'C', name='language_enum'), 
                                            nullable=False,
                                            default='PYTHON',
                                            server_default='PYTHON'))

    op.add_column('leetcoderecord', sa.Column('status', 
                                            sa.Enum('SOLVED', 'ATTEMPTED', 'REVIEWED', name='lcstatus_enum'), 
                                            nullable=False,
                                            default='SOLVED',
                                            server_default='SOLVED'))

    op.alter_column('product', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=80),
               existing_nullable=False)
    
    op.drop_column('product', 'category')
    op.add_column('product', sa.Column('category',
                                       sa.Enum('FRUITS', 'VEGETABLES', 'LEGUMES', 'GRAINS', 'BAKERY', 'DAIRY_EGGS', 'MEATS', 'SEAFOOD', 'FATS_OILS', 'SNACKS', 'SWEETS', 'BEVERAGES', 'CONDIMENTS_SAUCES', 'PROCESSED_CONVENIENCE', 'SUPPLEMENTS', name='product_category_enum'),
                                       nullable=False,
                                       server_default='PROCESSED_CONVENIENCE'
                                       )
                )

    op.alter_column('product', 'barcode',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=32),
               existing_nullable=False)
    op.alter_column('product', 'net_weight',
               existing_type=sa.NUMERIC(precision=10, scale=3),
               type_=sa.Numeric(precision=7, scale=3),
               existing_nullable=False)
    op.alter_column('product', 'calories_per_100g',
               existing_type=sa.NUMERIC(precision=8, scale=2),
               type_=sa.Numeric(precision=5, scale=2),
               existing_nullable=True)
    op.alter_column('shoppinglist', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=64),
               existing_nullable=True)
    op.alter_column('task', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=150),
               existing_nullable=False)

    op.add_column('task', sa.Column('priority',
                                    sa.Enum('LOW', 'MEDIUM', 'HIGH', name='priority_enum'),
                                    nullable=False,
                                    default='MEDIUM',
                                    server_default='MEDIUM'
                                    )
                )

    op.alter_column('timeentry', 'duration', new_column_name='duration_minutes')
    op.create_check_constraint(
        'ch_time_entry_duration_positive',
        'timeentry',
        'duration_minutes > 0'
    )

    op.alter_column('transaction', 'price_at_scan',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Numeric(precision=7, scale=2),
               existing_nullable=False)
    op.alter_column('user', 'username',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=30),
               existing_nullable=False)
    op.alter_column('user', 'name',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    

    op.add_column('user', sa.Column('role',
                                    sa.Enum('OWNER', 'ADMIN', 'USER', name='user_role_enum'),
                                    nullable=False,
                                    default='USER',
                                    server_default='USER'
                                    )
                )
    op.add_column('user', sa.Column('lang',
                                    sa.Enum('EN', 'DE', name='user_lang_enum'),
                                    nullable=False,
                                    default='EN',
                                    server_default='EN'
                                    )
                )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    raise NotImplementedError("Cannot safely downgrade due to major schema restructuring and enum type conversions")
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
