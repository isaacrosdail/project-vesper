"""Move id, created_at, tablenames to CustomBase class, add completed_at via mixin

Revision ID: a33a63e3d33d
Revises: 19984518b2de
Create Date: 2025-06-09 00:21:31.187815

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a33a63e3d33d'
down_revision: Union[str, None] = '19984518b2de'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('daily_reflection',
    sa.Column('reflection', sa.String(length=2000), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # ==== PRODUCT TABLE ==== Rename product_id to id && add new columns (from Base)
    op.alter_column('product', 'product_id', new_column_name='id')    # Rename PK name for Product to id
    op.add_column('product', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('product', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))

    # ==== TRANSACTION TABLE ==== Rename date_scanned to created_at & transaction_id to id
    op.alter_column('transaction', 'transaction_id', new_column_name='id')   # Change PK name for Transaction to id
    op.drop_column('transaction', 'created_at')
    op.alter_column('transaction', 'date_scanned', new_column_name='created_at')
    op.add_column('transaction', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    # Drop old FK in Transaction
    op.drop_constraint('transaction_product_id_fkey', 'transaction', type_='foreignkey')
    # Create new FK in Transaction pointing instead to product.id
    op.create_foreign_key(
        'transaction_product_id_fkey',
        'transaction',
        'product',
        ['product_id'], # FK column in Transaction table
        ['id']          # Referenced PK column in Product table
    )

    # ==== HABIT TABLE ====
    op.alter_column('habits', 'experimental_start_date', new_column_name='created_at')
    op.add_column('habits', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))

    # ==== HABITCOMPLETION TABLE ====
    op.drop_column('habit_completions', 'created_at')
    op.alter_column('habit_completions', 'completed_at', new_column_name='created_at')
    op.add_column('habit_completions', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))

    # True new column adds
    op.add_column('daily_intention', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('daily_metric', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('daily_metric', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('tasks', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))

    # ### end Alembic commands ###

    ### Manual edit: Rename table AFTER -> future code expects 'habit' not 'habits'
    op.rename_table('habits', 'habit')
    op.rename_table('tasks', 'task')
    op.rename_table('habit_completions', 'habitcompletion')
    op.rename_table('daily_intention', 'dailyintention')
    op.rename_table('daily_metric', 'dailymetric')
    op.rename_table('daily_reflection', 'dailyreflection')


def downgrade() -> None:
    """Downgrade schema."""

    # ==== TABLE RENAMES (undo first) ====
    op.rename_table('habit', 'habits')
    op.rename_table('task', 'tasks')
    op.rename_table('habitcompletion', 'habit_completions')
    op.rename_table('dailyintention', 'daily_intention')
    op.rename_table('dailymetric', 'daily_metric')
    op.rename_table('dailyreflection', 'daily_reflection')

    # ==== REMOVE NEW COLUMNS
    op.drop_column('tasks', 'updated_at')
    op.drop_column('daily_metric', 'updated_at')
    op.drop_column('daily_metric', 'created_at')
    op.drop_column('daily_intention', 'updated_at')

    # ==== HABITCOMPLETION TABLE ====
    op.drop_column('habit_completions', 'updated_at')
    op.alter_column('habit_completions', 'created_at', new_column_name='completed_at')

    # ==== HABIT TABLE ====
    op.drop_column('habits', 'updated_at')
    op.alter_column('habits', 'created_at', new_column_name='experimental_start_date')

    # ==== PRODUCT TABLE ====
    op.drop_column('product', 'updated_at')
    op.drop_column('product', 'created_at')
    # Rename Product column back prior to FK reversal for transaction below!
    op.alter_column('product', 'id', new_column_name='product_id')

    # ==== TRANSACTION TABLE ====
    # Restore old FK (now that product.product_id exists again)
    # Drop new FK first
    op.drop_constraint('transaction_product_id_fkey', 'transaction', type_='foreignkey')
    # Recreate original FK pointing to product.product_id
    op.create_foreign_key(
        'transaction_product_id_fkey',
        'transaction',
        'product',
        ['product_id'], # FK column in Transaction table
        ['product_id']
    )
    op.drop_column('transaction', 'updated_at')
    op.alter_column('transaction', 'created_at', new_column_name='date_scanned')
    # Change PK name for Transaction back to transaction_id
    op.alter_column('transaction', 'id', new_column_name='transaction_id')

    op.drop_table('daily_reflection')