"""update unitenum vals to uppercase

Revision ID: a014ce252637
Revises: bace352c9c4a
Create Date: 2025-09-29 16:35:58.990911

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a014ce252637'
down_revision: Union[str, None] = 'bace352c9c4a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 1. rename original
    op.execute("ALTER TYPE unit_enum RENAME TO unit_enum_old;")
    # 2. create new type with desired (ie, uppercased) values
    op.execute("CREATE TYPE unit_enum AS ENUM ('G', 'KG', 'OZ', 'LB', 'ML', 'L', 'FL_OZ', 'EA');")
    # 3. alter table column to use new enum with a cast
    op.execute("""
               ALTER TABLE product
               ALTER COLUMN unit_type TYPE unit_enum
               USING UPPER(unit_type::text)::unit_enum;
               """)
    # 4. drop old type
    op.execute("DROP TYPE unit_enum_old;")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 1. rename current (uppercase) type
    op.execute("ALTER TYPE unit_enum RENAME TO unit_enum_new;")
    # 2. recreate old (lowercase) type
    op.execute("""
        CREATE TYPE unit_enum AS ENUM ('g', 'kg', 'oz', 'lb', 'ml', 'l', 'fl_oz', 'ea');
    """)
    # 3. alter the column back (lowercasing the data)
    op.execute("""
        ALTER TABLE product
        ALTER COLUMN unit_type TYPE unit_enum
        USING LOWER(unit_type::text)::unit_enum;
    """)
    # 4. Drop the temporary renamed type
    op.execute("DROP TYPE unit_enum_new;")
    # ### end Alembic commands ###
