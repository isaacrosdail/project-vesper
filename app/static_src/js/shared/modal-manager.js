import { makeToast } from './toast.js';
import { makeTableRow} from './tables.js';
/**
 * Modal Manager - Auto-configures modals based on current page
 * 
 * NAMING CONVENTION:
 * - Modal ID:  {type}-entry-{context}-modal     (e.g., 'task-entry-dashboard-modal')
 * - Button ID: {type}-entry-{context}-btn       (e.g., 'task-entry-dashboard-btn') 
 * - Close ID:  {type}-entry-{context}-close-btn (generated by macro)
 * 
 * USAGE:
 * - Add new page(s) to modalConfigs object
 * - Use modal macro (or not I guess): {% call ui.modal('task-entry-dashboard', 'Add Task') %}
 * - Button must match buttonId in config
 * - Then our setup here auto-matches against modalConfigs & sets up event listeners for open/close/submit
 */

const modalConfigs = {
    '/habits/dashboard': {
        modalId: 'habit-entry-dashboard-modal', // id for dialog
        buttonId: 'habit-entry-dashboard-btn',  // id for button which opens dialog/modal
        endpoint: '/habits/',
        successMsg: 'Thing created!'
    },
    '/tasks/dashboard': {
        modalId: 'task-entry-dashboard-modal',
        buttonId: 'task-entry-dashboard-btn',
        endpoint: '/tasks/',
        successMsg: 'Thing created!'
    },
    '/time_tracking/dashboard': {
        modalId: 'time-entry-tracking-modal',
        buttonId: 'time-entry-tracking-btn',
        endpoint: '/time_tracking/',
        successMsg: 'Time entry created!'
    },
    '/': { // Time entry modal on homepage
        modalId: 'time-entry-homepage-modal',
        buttonId: 'time-entry-homepage-btn',
        endpoint: '/time_tracking/',
        successMsg: 'Time entry created!'
    },
}

// Detect current page to use correct config
const currentPath = window.location.pathname;
// console.log(`currentPath: ${currentPath}`)
const config = modalConfigs[currentPath];
// console.log(`Current config: ${config.buttonId}`)

function setupModal(modalId, buttonId, endpoint, successMsg) {
    const modal = document.querySelector(`#${modalId}`);
    if (!modal) return;

    console.log(`Triggered modal for: ${modalId}`);

    document.addEventListener('click', (e) => {
        if (e.target.matches(`#${buttonId}`)) {
            modal.showModal();
        }
        else if (e.target.matches(`#${modalId}-close-btn`)) {
            modal.querySelector('form').reset();
            modal.close();
        }
    });

    modal.addEventListener('cancel', () => {
        modal.querySelector('form')?.reset();
    });

    modal.addEventListener('submit', async (e) => {
        console.log('Submit event fired!');
        e.preventDefault();
        const formData = new FormData(e.target);
        
        try {
            const response = await fetch(endpoint, {
                method: 'POST',
                body: formData // TODO: NOTES: No headers needed for formData obj
            });
            const responseData = await response.json();
            
            if (responseData.success) {
                makeTableRow(responseData.data);
                modal.querySelector('form').reset();
                modal.close();
                if (successMsg) {
                    makeToast?.(successMsg);
                }
            } else {
                console.error('Error:', responseData.message);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
}

// Auto-setup modal
if (config) {
    setupModal(config.modalId, config.buttonId, config.endpoint, config.successMsg);
}