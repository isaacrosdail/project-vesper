import { makeToast } from './toast.js';
import { makeTableRow} from '../tables.js';
/**
 * Modal Manager - Auto-discovers standardized modals
 * 
 * NAMING CONVENTION:
 * - Modal ID:  {type}-entry-{context}-modal     (e.g., 'task-entry-dashboard-modal')
 * - Button ID: {type}-entry-{context}-btn       (e.g., 'task-entry-dashboard-btn') 
 * - Close ID:  {type}-entry-{context}-close-btn (generated by macro)
 * 
 * USAGE:
 * 1. Use modal macro: {% call ui.modal('endpoint', 'base-id', 'Title') %}
 * 2. Add maatching button with ID: {base-id}-btn
 * 3. Then this'll auto-discover & wire up all modals on page load
 * 
 * - Derives button ID by replacing '-modal' with '-btn'
 * - Sets up open/close/submit handlers
 * - Gets endpoint from modal's data-endpoint attribute
 */


// Scan for modals following our naming pattern
const modals = document.querySelectorAll('[id$="-modal"]'); // $= means "ends with"

modals.forEach(modal => {
    const fullId = modal.id; // "habit-entry-dashboard-modal"
    const baseId = fullId.replace('-modal', ''); // "habit-entry-dashboard"
    const button = document.querySelector(`#${baseId}-btn`);

    if (button) {
        // set up this modal
        const buttonId = button.id;
        const endpoint = window.location.origin + modal.dataset.endpoint; // dialog's data-endpoint
        setupModal(fullId, buttonId, endpoint);
    }
    console.log(`setupModal done for: ${modal.id}`);
});

function setupModal(modalId, buttonId, endpoint) {
    const modal = document.querySelector(`#${modalId}`);
    if (!modal) return;

    document.addEventListener('click', (e) => {
        if (e.target.matches(`#${buttonId}`)) {
            modal.showModal();
        }
        else if (e.target.matches(`#${modalId}-close-btn`)) {
            modal.querySelector('form').reset();
            modal.close();
        }
    });

    modal.addEventListener('cancel', () => {
        modal.querySelector('form')?.reset();
    });

    modal.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        console.log(`Submit event fired for modalId: ${modalId} with endpoint: ${endpoint}!`);
        submitModalForm(modal, endpoint, formData);
    });
}

async function submitModalForm(modal, endpoint, formData) {
    try {
        const response = await fetch(endpoint, {
            method: 'POST',
            body: formData // TODO: NOTES: No headers needed for formData obj
        });
        const responseData = await response.json();
        
        if (responseData.success) {
            makeTableRow(responseData.data);
            modal.querySelector('form').reset();
            modal.close();
            makeToast(responseData.message, 'success');
        } else {
            console.error('Error:', responseData.message);
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

// Trying out a confirmation manager singleton for dynamically handling confirmation popups
// TODO: Practice/study further
export const confirmationManager = {
    currentResolve: null, // store active resolve function

    init() {
        // one-time setup for confirmation modals
        const modal = document.querySelector('#confirmation-modal');
        modal?.addEventListener('click', (e) => {
            if (e.target.matches('#confirm-ok') && this.currentResolve) {
                this.currentResolve(true); // lets our await receive its answer
                modal.close();
                this.currentResolve = null; // then clean it up quickly prior to subsequent calls
            }
            else if (e.target.matches('#confirm-cancel') && this.currentResolve) {
                this.currentResolve(false);
                modal.close();
                this.currentResolve = null;
            }
        })
    },

    show(message) {
        return new Promise((resolve) => {
            // 1. update modal text (cls: confirmation-message) with message
            const confirmationMsg = document.querySelector('.confirmation-message');
            confirmationMsg.textContent = message;

            // 2. Show the modal
            const modal = document.querySelector('#confirmation-modal');
            modal?.showModal();

            this.currentResolve = resolve; // store THIS promise's resolve
        });
    }
}

// Set up listeners once
confirmationManager.init();