
/* NAVLINKS */
/* Base navlinks styling (desktop-first) */
/* ==== NAVIGATION ==== */

/* Hamburger button -> X effect */
.hamburger-btn .line1,
.hamburger-btn .line2,
.hamburger-btn .line3 {
    /* By default, browsers sometimes use the whole SVG's viewBox as the transform reference */
    /* fill-box forces it to use the _bounding box of the actual shape(s)_ inside .line1, etc */
    /* This way, each group behaves more like a div wrapping content so we can rotate _that group's box_, thus making transform-origin below use left center _of THIS current line_ not the viewbox as a whole */
    /* With fill-box, the origin resolves to the line's own bounding box, so rotations are local and predictable */
    transform-box: fill-box;
    transition: transform 0.2s ease-out;
}
.hamburger-btn .line2 {
    transition: opacity var(--transition-fade, 0.2s ease-out);
}
.hamburger-btn.is-open .line1 {
    transform-origin: left center;
    transform: rotate(var(--hamburger-angle)) scaleX(var(--hamburger-scale));
}
.hamburger-btn.is-open .line3 {
    transform-origin: left bottom;
    transform: rotate(calc(-1 * var(--hamburger-angle))) scaleX(var(--hamburger-scale));
}
.hamburger-btn.is-open .line2 {
    opacity: 0;
}

.nav-desktop {
    display: flex;
    gap: var(--gap-lg);
}
.nav-link {
    border-radius: calc(0.6 * var(--border-radius)); /* to stay proportionate */
    padding: var(--space-sm);
    flex-shrink: 1;
    white-space: nowrap;
    position: relative;
}
.nav-link::after {
    content: "";
    position: absolute;
    width: 0;
    height: 3px;
    left: 0; /* "pin left edge of rectangle to pos 0 (far left of parent)" */
    /* note that here if we wanted to make the underline start at right and expand to left, we could replace left 0 with right 0 instead! */
    bottom: 0;
    background: var(--accent-subtle);
    transition: width 0.1s ease;
}
.nav-link:hover::after,
.nav-link.active::after {
    width: 100%;
}
.nav-link:focus-visible {
    outline: var(--focus-ring);
    outline-offset: var(--focus-offset);
}

/* NAV COMPONENT STYLINGS */
nav {
    min-height: var(--min-navbar-height);
    background-color: var(--accent-strong);
    padding: var(--space-md);
    position: relative; /* forces nav to participate in stacking context so z-index actually applies */
    z-index: 250; /* to be above mobilenav */
}
.nav-anchor {
    position: relative; /* positioning context for mobilenav slidedown */
}
/* 2nd descendant of nav */
.navbar-content {
    display: flex;
    align-items: center;
    justify-content: flex-start; /* content starts left now for everything */
    max-width: 80rem;
    margin: 0 auto;
}
/* Direct descendant of nav */
.nav-left, .nav-right {
    display: flex;
    align-items: center;
    gap: clamp(var(--gap-sm), 1.5vw, var(--gap-md));
}
.nav-right {
    margin-left: auto; /* ...but retain the "push some stuff to the right side" effect */
}
.branding {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
    margin-right: var(--space-lg);
}
/* Container: visibility, positioning, stacking */
.nav-mobile-container {
    position: absolute;
    inset: 100% 0 auto 0; /* top right bottom left */
    z-index: 201;
    background-color: var(--accent-strong);
    padding: var(--space-xs);

    opacity: 0;
    pointer-events: none;
    transform: translateY(-300px) scaleY(0.95); /* "out of place" & squished to start, so transition can apply to something */
    transform-origin: top center;
    transition: 
        transform 0.2s cubic-bezier(0.25, 0.8, 0.25, 1);
}
.nav-mobile-container.is-open {
    display: flex;
    flex-direction: column;
    gap: var(--gap-lg);

    opacity: 1;
    pointer-events: auto;
    transform: translateY(0) scaleY(1); /* drops in & stretches to full */
}
/* Content: layout of links themselves */
.nav-mobile {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%; /* stretch column */
    gap: var(--gap-lg);
}
.nav-mobile a {
    display: block; /* each line fills parent's width */
    width: 100%;
    text-align: center;
    padding: var(--space-md) var(--space-md); /* for easier touch targets */
}