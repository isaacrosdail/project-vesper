/* Single entry file, declares layer order + imports
 * Defines cascade precedence: lowest = highest priority
 */
@layer base, components, utilities, animations, app;

/* Design tokens live OUTSIDE layers so everything can read vars */
@import './tokens.css';
@import url('./base.css') layer(base);
@import url('./components.css') layer(components);
@import url('./navigation.css') layer(components);
@import url('./utilities.css') layer(utilities);
@import url('./animations.css') layer(animations);

/* Breakpoints:
 * width <= 768px   Mobile nav toggle, chart stacking
 * width > 768px    Hide mobile navlinks?
 * width <= 768px   Hide 'desktop-only' classed table columns
*/

/* Thoughts on z-index standardization (as insurance)
 * 0-99    - Base layout elements
 * 100-199 - Tooltips, dropdowns
 * 200-299 - Context menus, popovers, navbar, sticky side panels
 * 300-399 - Modals, backdrop overlays
 * 400-499 - Toasts, system-level UI (spinners?)
 * 500+    - Debug layer, devtools, etc.
*/

:root {
    --min-navbar-height: 4rem;
}


legend {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    margin-bottom: var(--space-md);
    padding: 0 0 var(--space-lg);
}
h3 {
    font-size: var(--font-size-lg);
}

/* ==== MEDIA QUERIES ==== */
@media (width <= 768px) {
    .navlinks {
        display: none;
    }
}
@media (width > 768px) {
    .hamburger-btn { display: none; }
}
/* Viewmodels' COLUMN_CONFIGs dictate which table columns per table are 'essential' or 'desktop-only'
 * Let's us easily "condense" our tables to provide a better mobile experience
*/
@media (width <= 768px) {
    .desktop-only {
        display: none;
    }
}
/* TODO: Tune this later as we add some basic animations/transitions */
@media (prefers-reduced-motion: reduce) {
    .navlinks { transition: none; }
    .icon-wiggle { animation: none; transition: none; }
}

/* ===================================
    PAGE-SPECIFIC: Groceries Dashboard
   ===================================*/
/* Position our "x" button "outside"/"to the side of" the inline content */
.shoppinglist-item {
    position: relative; /* positioning context for inline-delete */
}
.shoppinglist-item button {
    cursor: pointer;
}
.shoppinglist-item svg {
    width: 100%;
    height: 100%;
    pointer-events: none;
}
.inline-delete {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    left: -1.4rem;
    top: 50%; /* position button's top edge at middle of container */
    transform: translateY(-50%); /* then shift up by half its own height to center it vertically */
    width: 20px;
    height: 20px;
    border: 1px solid var(--color-error);
    border-radius: 50%;
    opacity: 0;
    transition: var(--fade-in);
}

/* Show hidden controls on hover */
.shoppinglist-item:hover .inline-delete,
.shoppinglist-item:hover .qty-controls button {
    opacity: 1;
}
.qty-controls {
    display: flex;
    gap: var(--gap-sm);
    align-items: center;
}
.qty-controls button {
    opacity: 0;
    transition: var(--fade-in);
    color: var(--accent-subtle);
    width: 20px;
    height: 20px;
    background: transparent;
    border: 1px solid var(--accent-subtle);
    border-radius: 50%;
}


/* ===================================
    APP LAYOUT / PAGE SHELL
   ===================================*/

/* .wrapper & .content stylings below give us the "sticky footer" at the bottom */
/* Flex container for header/content/footer */
.wrapper {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    gap: calc(1.5 * var(--gap-lg));
    background-color: var(--bg-dark);
}
/* Main content area: fills remaining viewport space below navbar */
.content {
    flex: 1 0 auto;                        /* only grow vertically */
    width: 100%;                           /* take full width by default */
    max-width: clamp(35rem, 90vw, 90rem);  /* cap width responsively */
    margin-inline: auto;                   /* center horizontally */
    padding-inline: clamp(1rem, 4vw, 2rem);
    display: flex;
    flex-direction: column;
    gap: var(--gap-lg);
}
/* For pages using our content_mod Jinja block to provide narrower styling for content */
.content--narrow {
    max-width: clamp(35rem, 90vw, 50rem);
}

/* ===================================
    PAGE-SPECIFIC: Homepage
   ===================================*/
#sky-canvas {
    width: 100%;
    height: clamp(150px, 15vh, 300px);
}


/* ===================================
    PAGE-SPECIFIC: Landing Page
   ===================================*/

/* Container for landing page content */
.landing-content {
    overflow: hidden;
    align-items: center;
    padding: var(--space-xl) var(--space-md);
}
/* Cap the paragraph for legibility */
.landing-content p {
    max-width: 60ch;
    color: var(--text-muted);
}
.landing-content h1 {
    font-size: var(--font-size-xxl);
    font-weight: var(--font-weight-semibold);
    margin-bottom: var(--space-sm);
}
.landing-content a {
    text-align: center;
}

/* ===================================
    PAGE-SPECIFIC: Error Page(s)
   ===================================*/
/* 404 + 500 error pages */
.error-page {
    display: flex;
    flex-direction: column;
    gap: var(--gap-md);
    text-align: center;
    align-items: center;
}
.error-page > h1 {
    font-size: var(--font-size-xxl);
}
/* TODO: Rename*/
.icon-wiggle {
    width: clamp(12rem, 30vw, 20rem);
    height: auto;
    display: block;
}

/* ===================================
    PAGE-SPECIFIC: Style-reference Page
   ===================================*/

/* Override stylng to position dummy context menu */
.context-menu-positioning {
    position: relative;
}
/* Grid defaults for token swatches */
.demo-grid-container { 
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(80px, 100px));
    gap: var(--gap-md);
    align-items: center;
}
/* Default stylings for component swatches */
/* Only size (aspect-ratio, max-width) and centering content */
.demo-grid-container > div {
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    max-width: 100px;
    border: 1px solid var(--text);
    border-radius: var(--border-radius);
}
/* Target components to let them breathe */
.demo-grid-container:has(:not(div)) {
    grid-template-columns:  repeat(auto-fit, minmax(80px, 1fr));
}

