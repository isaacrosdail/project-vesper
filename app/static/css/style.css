@import 'tailwindcss';
@import './themes.css';

/* ==== TAILWIND LAYERS ==== */
/* Using @layer to extend the _base_ (modifying Tailwind's Preflight config so it lets me change the font) */
@layer base {
    html {
        font-family: 'Manrope', sans-serif;
        font-weight: 500;
    }
}

/* Breakpoints:
 * width <= 640px   Mobile nav toggle, chart stacking
 * width > 640px    Hide mobile navlinks?
 * width >= 1024px  Adjust dashboard-container max-width/padding
 * width >= 1280px  Adjust dashboard-container max-width
*/


/* ======= COMPONENT UTILITIES =======
 * "Making 'Tailwind at home'" (I didn't even steal this idea!!)
 * Design token-based component classes that adapt to theme changes automatically.
 *
 * Using semantic CSS variables (--text, --bg) instead of hardcoded colors, making components theme-agnostic. Changing themes automatically
 * changes the values of these classes without needing to alter any HTML/templates.
 * This replaces template macros & hardcoded colors with a more maintainable, scalable design system that separates content (HTML) from styling (CSS).
 */

/* Styling note to self: Components should mostly worry about internal padding & appearance, NOT margin -> that's the parent's responsibility */
@layer components {

    /* ======= BUTTONS ======= */
    /* Base button styling: shape + ergonomics goes here */
    .btn {
        display: inline-flex; /* icons+text align*/
        align-items: center; /* for icon+label vertical centering? */
        justify-content: center; /* center text when full width */
        min-height: 2.5rem; /* ensure big enough for touch */
        line-height: 1; /* explicit to be consistent across browsers */
        cursor: pointer;
        user-select: none;
        appearance: none;
        padding: 0.5rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        gap: 0.4rem;
    }
    /* Subtle "pressed" effect for active buttons */
    .btn:active {
        transform: translateY(1px);
        filter: brightness(0.95);
    }
    /* Focus ring: visual feedback for keyboard users */
    .btn:focus-visible {
        outline: red;
        outline-offset: 2px;
    }
    /* Catch native + ARIA-disabled buttons */
    .btn[disabled],
    .btn[aria-disabled="true"] {
        opacity: 0.6;
        cursor: not-allowed;
        pointer-events: none;
    }
    .btn-primary {
        background-color: var(--accent-lighter);
        color: var(--text);
        border-color: var(--border-color);
    }
    .btn-secondary {
        background-color: var(--bg-light);
        color: var(--text-muted);
        border-color: var(--border-color);
    }
    .btn-destructive {
        color: var(--text-destructive);
        border-color: var(--text-destructive);
    }
    /* Scope hover styles (skip on touchscreen) */
    /* Color-mixing with --text ensures light mode buttons get lighter AND dark mode buttons get darker */
    @media (hover: hover) {
        .btn-primary:hover {
            background-color: color-mix(in srgb, var(--accent-lighter) 80%, var(--text));
        }
        .btn-secondary:hover {
            background-color: color-mix(in srgb, var(--bg-light) 80%, var(--text));
        }
        .btn-destructive:hover {
            color: var(--bg-light);
            background-color: var(--text-destructive);
        }
    }

    /* ======= TABLE COMPONENTS ======= */
    /* Needed higher specificity here to override so delete-cell properly blends in to card */
    /* TODO: BUG: Fix this & sort out why table-cell class is required for delete-btn's to style properly */
    .table-cell.delete-cell {
        border: none;
        padding: 0;
        width: 0; /* prevent us from consuming extra table width */
        background-color: var(--bg);
    }
    .table-empty {
        text-align: center;
        color: var(--text-muted);
        font-style: italic;
        padding: 0.5rem 0;
    }
    .table-standard {
        caption-side: top;
        table-layout: auto; /* TODO: study */
        border-collapse: collapse;
        width: 100%;
        font-size: 0.875rem;
    }
    .table-standard th,
    .table-standard td {
        padding: 0.5rem;
        border: 1px solid var(--border-color);
    }
    .table-header th {
        background-color: var(--accent-lighter);
        color: var(--text);    /* TODO */
        font-weight: 600; /* equivalent to font-semibold in Tailwind */
    }
    .table-row {
        transition: background-color 25ms ease-out;
    }
    .table-row .delete-btn {
        visibility: hidden; /* All (table) delete buttons start hidden */
    }
    .table-row:hover .delete-btn {
        visibility: visible; /* ..and become visible on hover of row */
    }
    .table-row:nth-child(even) {
        background-color: var(--bg-light);
    }
    .table-row:hover {
        background-color: var(--ui-hover);
        color: var(--text); /* TODO */
    }

    /* ======= LAYOUT COMPONENTS ======= */

    /* Mimick <fieldset>'s 'title intersects border' effect for container headers */
    .card-title {
        position: absolute; /* TODO: NOTES: breaks the title out of normal flow */
        top: -0.9rem;
        left: 1rem;
        background: linear-gradient(
            to bottom,
            var(--bg-dark) 48%, /* Top half */
            var(--bg) 52%      /* Bottom half */
        );
        padding: 0 0.02rem;
        font-size: 1.25rem;
        line-height: 1.75rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        pointer-events: none;
        /* margin: 0; */
    }
    /* Getting our "Add __" buttons to appear above top right of tables */
    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    /* Warnings? Messages? Success? idk */
    .flash-message {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%; /* match navbar width */
        height: var(--min-navbar-height);
        z-index: 99; /* appear above other content */
        background-color: color-mix(in srgb, var(--color-success) 10%, white); /* Derive bg-color from our color-success var instead of hardcoding */
        color: var(--color-success);
        padding: 0.5rem 1rem;  /* py-2 px-4 */
        border-radius: var(--border-radius);
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); /* shadow */
        margin-bottom: 1rem;          /* mb-4 */
    }
    /* TODO: Not 100% happy with these 2, not sure why though. */
    .border-card {
        border: solid 1px var(--border-color);
    }
    .shadow-card {
        box-shadow: 0px 2px 2px hsla(0, 0%, 0%, 0.07), 0px 4px 4px hsla(0, 0%, 0%, 0.15);
    }

}

/* General formula for using properties as bools?
 * if (condition)  => multiply by 1 or 0
 * if (!condition) => multiply by (1 - condition)
*/
:root {
    --min-navbar-height: 4rem;
    --border-radius: 0.5rem;
    --border-radius-top: 0.5rem 0.5rem 0 0;
    --has-hover: 0;
}
/* TODO: FINISH: Use media query to effectively set a bool? Play around with this */
@media (hover: hover) {
    :root {
        --has-hover: 1;
    }
}
/* ==== GLOBAL STYLES ==== */
/* Force everything to respect the screen width */
* {
    box-sizing: border-box; /* Padding/borders included in width calculations */
}
/* Affects selected text (replaces standard "blue highlight + white text" default) */
::selection {
    background-color: var(--bg-selection);
    color: var(--text-selection);
}
::placeholder, .placeholder-text {
    opacity: 0.8;
}

/* Container for landing page content */
.landing-content {
    display: flex;
    overflow: hidden;
    flex-direction: column;
    align-items: center; /*horizontal center children */
    gap: 1rem;
    padding: 2rem 1rem;
}
/* Cap the paragraph for legibility */
.landing-content p {
    font-size: 1rem;
    line-height: 1.5; 
    max-width: 60ch;
    color: var(--text-muted);
}

.landing-content h1 {
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    /* text-align: left; */
}
.landing-content a {
    text-align: center;
}
/* === LANDING PAGE CONTENT STYLING ABOVE === */


/* Base input stylings */
:where(input, select, textarea) {
    background-color: var(--bg-light);
    color: var(--text);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 0.5rem 0.75rem;
}
:where(input, select, textarea):focus-visible {
    outline: 1px solid var(--accent-lighter);
    outline-offset: 1px;
}


/* ===== FORMS, INPUTS ===== */
/* For dashboard quick-entry & JS inline cell edit inputs */
.input-inline {
    padding-block: 0.25rem; /* Slightly tighter */
    border: none;
    border-bottom: 1px solid var(--border-color);
    /* box-shadow: none; */
    font-size: 0.875rem;
}
/* For consistent spacing/styling for "CTA + secondary buttons that might be anchor elements" pattern */
.form-actions {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
    gap: 0.5rem;
}
.form-actions > * {
    min-width: 8rem;
}
/* Form & Input Validation Styling (user-valid/invalid is a relatively new feature? Check browser support) */
.form-group {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    margin-bottom: 1rem;
}
form input:not([type="checkbox"]):user-valid {
    outline: 2px solid;
    outline-color: var(--color-success);
}
form input:not([type="checkbox"]):user-invalid {
    outline: 2px solid;
    outline-color: var(--color-error);
}

/* ===== CUSTOM COMPONENT STYLINGS ===== */
.context-menu {
    background-color: var(--bg);
    color: var(--text);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    position: fixed;  /* important since it takes it out of the DOM flow? */
    max-width: 50%;
    z-index: 1000;
}
.context-menu > li {
    padding: 0.5rem 1rem;
}
/* Style hover so its corners don't jut out from ul element itself */
.context-menu > li:first-child:hover {
    border-radius: var(--border-radius) var(--border-radius) 0 0; /* top-left, top-right only */
}
.context-menu > li:last-child:hover {
    border-radius: 0 0 var(--border-radius) var(--border-radius); /* bottom-left, bottom-right only */
}
.context-menu > li:only-child:hover {
    border-radius: var(--border-radius);
}
.context-menu > li:hover {
    background-color: var(--ui-hover);
    cursor: pointer;
}
/* TODO: 
 * FINISH: Tune styling 
 * Also consider renaming to modal? Need to determine roles/intentions there
 */
dialog {
    background-color: var(--bg);
    padding: 2rem;
    position: fixed;
    top: 30%;
    left: 50%;
    transform: translate(-50%, -50%);
    border: none;
    border-radius: var(--border-radius);
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
}
dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(10px);
}
/* Ditch 'close' button in leiu of an X */
.modal-close {
    position: absolute;
    top: 0.5rem;
    right: 1.5rem;
    padding: 0.25rem 0.5rem; /* override btn: smaller box */
    line-height: 1;
    color: var(--text-muted);
    background: transparent;
    border: none;
    font-size: 1.5rem;
}
.modal-close:hover {
    color: var(--text-destructive);
}
.tooltip-popup { 
    position: relative; /* also makes it act as anchor for ::after ? */
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    background-color: color-mix(in srgb, var(--text) 90%, transparent); /* steal other theme's TEXT color - should be appropriate */
    color: var(--bg); /* then use current bg as text for color parity */
    overflow-wrap: break-word;
    padding: 4px 4px;
    margin-top: 8px;
    max-width: 28ch;
}
.tooltip-popup:not(#no-after)::after {
    content: "";
    position: absolute;
    left: var(--carrot-pos, 50%); /* --carrot-pos calculated via JS */
    transform: translate(-50%, -40%);
    border: 0.4rem solid transparent; /* forms our triangle "arrow" */
    border-bottom-color: color-mix(in srgb, var(--text) 90%, transparent);
    opacity: 1;
    top: -0.4rem;
}

/* ==== NAVIGATION ==== */
#hamburger-btn {
    color: var(--text);
    min-width: 40px;
    min-height: 40px;
}
/* Base navlinks styling (desktop-first) */
.navlinks {
    display: flex;
    gap: 1.5rem;
}
nav {
    min-height: var(--min-navbar-height);
    background-color: var(--accent-darker);
    padding: 1rem;
    position: relative; /* creates positioning context for flash-message */
}
/* 2nd descendant of nav */
.navbar-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 80rem; /* max-w-7xl equivalent */
    margin: 0 auto; /* mx-auto equivalent */
}
/* Direct descendant of nav */
.nav-left, .nav-right {
    display: flex;
    align-items: center;
    gap: 1.5rem;
}
.nav-link {
    text-decoration: none;
    color: var(--text);
}
.nav-link:hover {
    background-color: var(--ui-hover);
    /* color: var(--text-inverse); TODO: Works well on dark mode, but light mode not at all */
}
.nav-link.active {
    background-color: var(--ui-hover); /* might add 'nav-active' for separate styling */
    color: var(--text);
    /* color: var(--text-inverse); TODO: Again, well on dark, not light */
}
.branding {
    color: var(--text);
    font-size: 1.5rem; /* text-2xl */
    font-weight: 600; /* font-semibold */
    margin-right: 1.5rem; /* mr-6 */
}

/* Hide text for theme toggle */
.visually-hidden {
    clip-path: inset(50%); /* Clips (hides) 50% from all sides of element - creates 1x1 pixel visible area in center */
    height: 1px;
    width: 1px; /* makes element tiny, small enough to be invisible but not zero (zero dimensions can be ignored by screen readers */
    overflow: hidden; /* hides any content that would spill outside 1x1 px box*/
    position: absolute; /* takes element out of normal document flow - prevents layout spillover */
    white-space: nowrap; /* prevents text from wrapping to multiple lines */
}


/* .wrapper & .content stylings below give us the "sticky footer" at the bottom */
/* Flex container for header/content/footer */
.wrapper {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}
/* Main content area: fills remaining viewport space below navbar */
.content {
    flex: 1; /* makes flex container's child grow & take up all remaining space */
    background-color: var(--bg-dark);
}
/* Layout for card: layout only, max-width, margin, padding around grid/stack, gap */
.dashboard-container {
    max-width: 48rem;
    margin: 2.5rem auto 0;
    padding: 1rem 1rem 0;
    display: flex;
    flex-direction: column;
    gap: 1.5rem; /* controls spacing between items in layout containers like grids &  flexboxes */
}
/* Card itself: border-radius, shadow, card bg, internal padding, & verical spacing between its children */
.card-dashboard {
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    background-color: var(--bg);
    border: solid 1px var(--border-color);
    position: relative; /* for card-title positioning */
    /* Remember: Vertical spacing is gap's job, no button/header-specific margins */
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

/* Dashboard checkbox completion effect */
.habit-list {
    list-style: none;
    display: grid;
    gap: 0.5rem;
}
.habit-row {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}
.habit-title {
    color: var(--text);
}

.habit-item.completed .habit-title {
    text-decoration: line-through;
    color: var(--text-muted);
}

/* ====== STYLINGS FOR METRICS DASHBOARD/CARDS ====== */
.charts-container {
    display: grid;
    grid-template-columns: 1fr 1fr; /* 2 equal-width columns */
    gap: 1rem;
}
.metric-graph {
    width: 100%;
    aspect-ratio: 16/9; /* fixes one graph being slightly taller than other - check out other options */
}


/* ====== CARD STYLINGS ====== */
/* Now making our greeting card be grid layout within our flexbox content */
/* TODO: Need to fix divider so it spans entire height of greeting card again */
#greeting-card {
    display: grid;
    /* grid-template-columns
    1fr: takes up available space
    auto: just wide enough for content (our divider)
    1fr: takes up remaining available space
    */
    grid-template-columns: 1fr auto 1fr; /* time | divider | weather */
    grid-template-rows: 1fr;
    min-height: 120px;
    align-items: stretch; /* makes all children same height */
}

/* Makes DailyCheckin card consist of grid layout with two columns */
#daily-check-in-card {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.25rem;
}
#daily-check-in-card > div {
    padding: 1.5rem;
}

/* Applied to SVG icon for table rows (overlap with Tailwind, but am planning to ditch Tailwind anyway */
.hidden {
    display: none;
}

/* ==== FOOTER ==== */
footer {
    text-align: center;
    padding: 10px;
    font-size: 0.9em;
}

/* ==== MEDIA QUERIES ==== */
/* Small screens only =>  Hide desktop nav & show hamburger button */
@media (width <= 640px) {
    /* Mobile: hidden until toggled */
    .navlinks {
        display: none;
        flex-direction: column;
        row-gap: 1.5rem;
    }
    .navlinks.is-open { display: flex; }
    .charts-container, #daily-check-in-card {
        grid-template-columns: 1fr; /* stack charts + metric-row divs for smaller widths */
    }
}
@media (width > 640px) {
    #hamburger-btn { display: none; }
}
@media (width >= 1024px) {
    .dashboard-container {
        max-width: 72rem; /* lg:max-w-6xl */
        padding: 1rem 2rem 0; /* sm:px-8 */
    }
}
@media (width >= 1280px) {
    .dashboard-container {
        max-width: 80rem; /* xl:max-w-7xl */
    }
}

/* TODO: Tune this later as we add some basic animations/transitions */
@media (prefers-reduced-motion: reduce) {
    .navlinks {transition: none;}
}

/* Override stylng to position dummy context menu on theme-demo page */
.context-menu-positioning {
    position: relative;
}
/* Grid container for various theme-demo page components */
.demo-grid-container { 
    display: grid;
    /* TODO: NOTES: Add
     * minmax(200px, 1fr) => each item >= 200px wide, but can stretch to fill
     * auto-fit => automatically packs as many columns as will fit in the row
    */
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
}