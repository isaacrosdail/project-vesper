@import 'tailwindcss';
@import './themes.css';

/* TODO: STUDY/DRILL THIS IN FULL */

/* ==== TAILWIND LAYERS ==== */
/* Using @layer to extend the _base_ (modifying Tailwind's Preflight config so it lets me change the font) */
@layer base {
    html {
        font-family: 'Manrope', sans-serif;
        font-weight: 500;
    }
}

/* ======= COMPONENT UTILITIES =======
 * "Making 'Tailwind at home'" (I didn't even steal this idea!!)
 * Design token-based component classes that adapt to theme changes automatically.
 *
 * Using semantic CSS variables (--text, --bg) instead of hardcoded colors, making components theme-agnostic. Changing themes automatically
 * changes the values of these classes without needing to alter any HTML/templates.
 * This replaces template macros & hardcoded colors with a more maintainable, scalable design system that separates content (HTML) from styling (CSS).
 */
@layer components {

    /* ======= BUTTONS ======= */
    .btn-primary {
        display: inline-block; /* keeps button compact-ly sized? */
        background-color: var(--accent-lighter);
        color: var(--text);
        border: 1px solid var(--border);
        border-radius: 0.375rem;
        padding: 0.5rem 1rem;
        /* width: 100%; */
        cursor: pointer;
    }
    .btn-primary:hover {
        /* Color-mixing with --text ensures light mode buttons get lighter AND dark mode buttons get darker */
        background-color: color-mix(in srgb, var(--accent-lighter) 80%, var(--text));
    }
    .btn-secondary {
        display: inline-block; /* keeps button compact-ly sized? */
        background-color: var(--bg-light);
        color: var(--text-muted);
        border: 1px solid var(--border);
        border-radius: 0.375rem;
        padding: 0.5rem 1rem; /* px-4 py-2*/
        /* width: 100%; */
        cursor: pointer;
    }
    .btn-secondary:hover {
        background-color: color-mix(in srgb, var(--bg-light) 80%, var(--text));
    }
    .btn-destructive {
        color: var(--text-destructive);
    }
    .btn-destructive:hover {
        color: color-mix(in srgb, var(--text-destructive) 80%, white);
        cursor: pointer;
    }

    /* ======= TABLE COMPONENTS ======= */
    /* Needed higher specificity here to override so delete-cell properly blends in to card */
    .table-cell.delete-cell {
        background-color: var(--bg);
        border: none;
    }
    .table-empty {
        text-align: center;
        color: var(--text-muted);
        font-style: italic;
        padding: 0.5rem 0;
    }
    .table-standard {
        caption-side: top;
        table-layout: auto; /* TODO: study */
        border-collapse: collapse;
        width: 100%;
        font-size: 0.875rem;
    }
    /* TODO: Table header row styling - remove all bg-gray-800 mentions from thead classes!!! */
    .table-header {
        background-color: var(--accent-lighter);
        color: var(--text);    /* TODO */
        font-weight: 600; /* equivalent to font-semibold in Tailwind */
        padding: 0.5rem;
        border: 1px solid var(--border);
    }
    .table-cell {
        padding: 0.5rem;
        border: 1px solid var(--border);
    }
    .table-row {
        transition: 25ms;
    }
    .table-row .delete-btn {
        visibility: hidden; /* All (table) delete buttons start hidden */
    }
    .table-row:hover .delete-btn {
        visibility: visible; /* ..and become visible on hover of row */
    }
    .table-row:nth-child(even) {
        background-color: var(--bg-light);
    }
    /* TODO: Unnecessary? */
    .table-row:nth-child(odd) {
        background-color: var(--bg-dark); /* TODO? */
    }
    .table-row:hover {
        background-color: var(--ui-hover);
        color: var(--text); /* TODO */
    }

    /* ======= NAVIGATION ======= */
    .nav-link {
        text-decoration: none;
        color: var(--text);
    }
    .nav-link:hover {
        background-color: var(--ui-hover);
    }
    .nav-link.active {
        background-color: var(--ui-hover); /* might add 'nav-active' for separate styling */
    }

    /* ======= LAYOUT COMPONENTS ======= */
    .dashboard-card {
        min-width: max-content;
        padding: 1.5rem;
        border-radius: 0.75rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        background-color: var(--bg);

        /* TODO: Scrap, this is temporary to see styling as I wrap up */
        border: solid 1px var(--border);

        position: relative;
        margin-top: 1rem;
    }
    /* Mimicking <fieldset>'s 'title intersects border' effect for our table container headers */
    .card-title {
        position: absolute; /* breaks the title out of normal flow */
        top: -0.9rem;
        left: 1rem;
        background: linear-gradient(
            to bottom,
            var(--bg-dark) 50%, /* Top half */
            var(--bg) -50%      /* Bottom half */
        );
        padding: 0 0.02rem;
        margin: 0;
    }
    /* Getting our "Add __" buttons to appear above top right of tables */
    .table-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }
    .table-card-btn {
        margin-left: auto;
    }

    /* Warnings? Messages? Success? idk */
    .flash-message {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%; /* match navbar width */
        height: var(--min-navbar-height);
        z-index: 99; /* appear above other content */
        background-color: color-mix(in srgb, var(--color-success) 10%, white); /* Derive bg-color from our color-success var instead of hardcoding */
        color: var(--color-success);
        padding: 0.5rem 1rem;  /* py-2 px-4 */
        border-radius: 0.25rem; /* rounded */
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); /* shadow */
        margin-bottom: 1rem;          /* mb-4 */
    }
    /* TODO: Not 100% happy with these 2, not sure why though. */
    .border-card {
        border: solid 1px var(--border);
    }
    .shadow-card {
        box-shadow: 0px 2px 2px hsla(0, 0%, 0%, 0.07), 0px 4px 4px hsla(0, 0%, 0%, 0.15);
    }

}

/* */
:root {
    --min-navbar-height: 4rem;
}

/* TODO: use :where to consolidate these into one. input base styles (standard & inline) */
input:not(.input-inline), 
select:not(.input-inline) {
    background-color: var(--bg-light);
    color: var(--text-muted);
    border: 1px solid var(--border);
    border-radius: 0.25rem;
    box-shadow: var(--shadow-card);
    padding: 0.5rem 0.75rem;
}
/* For dashboard quick-entry */
.input-inline {
    background-color: var(--bg-light);
    color: var(--text-muted);
    border: 1px solid var(--border);
    border-radius: 0.375rem;
    box-shadow: var(--shadow-card);
    padding: 0.25rem 0.75rem; /* Slightly tighter */
    font-size: 0.875rem;
}
.context-menu {
    background-color: red;
    border: 1px solid black;
    position: fixed;  /* important since it takes it out of the DOM flow? */
    z-index: 1000;
}

/* For regular forms, more padding and stronger borders */
/* .input-standard {
    padding: 0.5rem 0.75rem;
    width: 100%;
    border-width: 2px;
} */
h2 {
    font-size: 1.25rem;
    line-height: 1.75rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}
/* TODO: Clean up: Styling for playing around with dialog element to make modal */
/* TODO: STUDY TRANSFORM */
dialog {
    background-color: var(--bg);
    padding: 2rem;
    position: fixed;
    /* Move 50% relative to container */
    top: 30%;
    left: 50%;
    transform: translate(-50%, -50%); /* transforms don't affect layout, they're visual effects that happen "on top" of the normal page flow */
    border: none;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
}

dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(10px); /* create a  blur effect behind modal -> filter: blur(10px); would make the ENTIRE element/page blur? */
    /* Note: apparently high blur (blur(20px)+) on large areas may impact performance */
}
/* Affects selected text (replaces standard "blue highlight + white text" default) */
::selection {
    background-color: var(--bg-selection);
    color: var(--text-selection);
}
::placeholder {
    opacity: 80%;
}
nav {
    min-height: var(--min-navbar-height);
    background-color: var(--accent-darker);
    padding: 1rem;
    position: relative; /* creates positioning context for flash-message */
    /* overflow: hidden; keep content inside navbar bounds */
}
/* 2nd descendant of nav */
.navbar-inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 80rem; /* max-w-7xl equivalent */
    margin: 0 auto; /* mx-auto equivalent */
}
/* Direct descendant of nav */
.nav-container {
    display: flex;
    gap: 1.5rem;
}
/* Target direct div children of nav-container */
/* .nav-container > div {
    display: flex;
    gap: 1.5rem; 
} */
.branding {
    color: var(--text);
    font-size: 1.5rem; /* text-2xl */
    font-weight: 600; /* font-semibold */
    margin-right: 1.5rem; /* mr-6 */
}
/* TODO: Consider changing this */
#theme {
    cursor: pointer;
}
/* Hide text for theme toggle */
.visually-hidden {
    clip-path: inset(50%); /* Clips (hides) 50% from all sides of element - creates 1x1 pixel visible area in center */
    height: 1px;
    width: 1px; /* makes element tiny, small enough to be invisible but not zero (zero dimensions can be ignored by screen readers */
    overflow: hidden; /* hides any content that would spill outside 1x1 px box*/
    position: absolute; /* takes element out of normal document flow - prevents layout spillover */
    white-space: nowrap; /* prevents text from wrapping to multiple lines */
}
/* ==== GLOBAL STYLES ==== */
/* Force everything to respect the screen width */
* {
    box-sizing: border-box; /* Padding/borders included in width calculations */
}

/* .wrapper & .content stylings below give us the "sticky footer" at the bottom */
/* Full height flex container => header/content/footer */
.wrapper {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}
/* Main content area: fills remaining viewport space below navbar */
.content {
    /* Tells flex container's child to grow and take up all remaining space */
    flex: 1;
    background-color: var(--bg-dark);
    /* Other standard page stylings */
}
.dashboard-container {
    background-color: var(--bg-dark);
    max-width: 48rem; /* = 3xl in Tailwind */
    margin: 2.5rem auto 0;
    overflow-x: auto;
    padding: 1rem 1rem 0;
    display: flex;
    flex-direction: column;
    gap: 1.5rem; /* controls spacing between items in layout containers like grids &  flexboxes */
}


/* ==== NAVIGATION ==== */
/* Desktop-first styling for navbar */
#desktop-nav {
    display: flex;
    column-gap: 1.5rem; /* space-x-6 */
}
#mobile-nav {
    display: none;
    flex-direction: column;
    row-gap: 1.5rem;        /* space-y-6 */
}
#mobile-nav.show {
    display: flex;
}
#hamburger-btn {
    color: var(--text);
    display: none;
}

.habit-item.completed .habit-title {
    text-decoration: line-through;
    color: var(--text-muted);
}

/* ====== STYLINGS FOR METRICS DASHBOARD/CARDS ====== */
.charts-container {
    display: grid;
    grid-template-columns: 1fr 1fr; /* 2 equal-width columns */
    gap: 1rem;
}
.metric-graph {
    width: 100%;
    aspect-ratio: 16/9; /* fixes one graph being slightly taller than other - check out other options */
}


/* ====== CARD STYLINGS ====== */
/* Now making our greeting card be grid layout within our flexbox content */
/* TODO: Need to fix divider so it spans entire height of greeting card again */
#greeting-card {
    display: grid;
    /* grid-template-columns
    1fr: takes up available space
    auto: just wide enough for content (our divider)
    1fr: takes up remaining available space
    */
    grid-template-columns: 1fr auto 1fr; /* time | divider | weather */
    grid-template-rows: 1fr;
    min-height: 120px;
    align-items: stretch; /* makes all children same height */
}
/* Styling our visible divider div in between greeting & weather */
.divider {
    width: 2px;
    background-color: var(--border);
    height: 100%;
    opacity: 50%;
}
/* Makes DailyCheckin card consist of grid layout with two columns */
#daily-check-in-card {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.25rem;
}
/* Makes h2 element span all columns */
#daily-check-in-card h2 {
    grid-column: 1 / -1;
}

/* "Apply 1.5rem padding to all direct div children of 'section' elements EXCEPT those with class 'divider' and sections of id "greeting-card" :D 
** To apply our Tailwind p-6 class styling to most cards (except Critical Task) */
section:not(#greeting-card) > div:not(.divider) {
    padding: 1.5rem; /* equivalent to p-6 (24px)*/
}



/* ==== FORMS & INPUTS ==== */
/* Form & Input Validation Styling (user-valid/invalid is a relatively new feature? Check browser support) */
.form-group {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    margin-bottom: 1rem;
}
form input:not([type="checkbox"]):user-valid {
    outline: 2px solid;
    outline-color: var(--color-success);
}
form input:not([type="checkbox"]):user-invalid {
    outline: 2px solid;
    outline-color: var(--color-error);
}

/* ==== UTILITY CLASSES ==== */
/* 
Currently used for critical-task-card stuff in JS (Added 02.04.25) && for making delete button appear on hover next to table rows
TODO: iirc, using display none does not prevent input? 
Need to double check & adjust usage of hidden/disabled accordingly in our form pages
*/
.hidden {
    display: none;
}

/* ==== FOOTER ==== */
footer {
    /* bg-gray-100 text-center text-sm py-4 */
    text-align: center;
    padding: 10px;
    font-size: 0.9em;
}

/* ==== MEDIA QUERIES ==== */
/* Small screens only =>  Hide desktop nav & show hamburger button */
@media (width <= 640px) {
    #hamburger-btn { display: block; }
    nav { height: auto; } /* Let mobile nav grow */
    #desktop-nav { display: none; }
    .charts-container, #daily-check-in-card {
        grid-template-columns: 1fr; /* stack charts + metric-row divs for smaller widths */
    }
}

@media (width > 640px) {
    #mobile-nav.show {
        display: none;
    }
}

@media (width >= 1024px) {
    .dashboard-container {
        max-width: 72rem; /* lg:max-w-6xl */
        padding: 1rem 2rem 0; /* sm:px-8 */
    }
}

@media (width >= 1280px) {
    .dashboard-container {
        max-width: 80rem; /* xl:max-w-7xl */
    }
}