diff --git a/app/_templates/_partials/_components.html b/app/_templates/_partials/_components.html
index ab4ce8d..4009d14 100644
--- a/app/_templates/_partials/_components.html
+++ b/app/_templates/_partials/_components.html
@@ -12,6 +12,39 @@ If we're defining reusable COMPONENTS (with structure/behavior/logic) → here (
 #}
+{# Responsive Tables #}
+{% macro responsive_table(caption, headers, items, module_name, subtype) %}
+<table class="table-standard">
+  <caption class="sr-only">{{ caption }}</caption>
+  <thead class="table-header">
+    <tr>
+      {% for col in headers %}
+        <th class="{{ col.priority }}">{{ col.label }}</th>
+      {% endfor %}
+    </tr>
+  </thead>
+  <tbody>
+    {% if items %}
+      {% for item in items %}
+        <tr class="table-row" data-item-id="{{ item.id }}" data-module="{{ module_name }}" data-subtype="{{ subtype }}">
+          {{ caller(item, headers) }}
+          <td class="table-cell delete-cell">
+            {{ delete_btn() }}
+          </td>
+        </tr>
+      {% endfor %}
+    {% else %}
+        <tr>
+          <td colspan="99" class="table-empty">
+            No entries yet.
+          </td>
+        </tr>
+    {% endif %}
+  </tbody>
+</table>
+{% endmacro %}
 {# === MODALS === #}
 {# Entry form modal #}
@@ -20,7 +53,7 @@ If we're defining reusable COMPONENTS (with structure/behavior/logic) → here (
 {# by sandwiching them between 'call ourmacro(ourparameters,..)' and 'endcall' #}
 {# TODO: NOTES: {% call %} doesn't work with a template that doesn't use caller() #}
 {% macro modal(endpoint, id, title) %}
-<dialog id="{{ id }}-modal" data-endpoint="/{{ endpoint }}/">
+<dialog id="{{ id }}-modal" data-endpoint="/{{ endpoint }}">
     <form>
         <legend>{{ title }}</legend>
         <button type="button" class="modal-close btn btn-destructive" id="{{ id }}-modal-close-btn">&times;</button>
@@ -74,3 +107,67 @@ If we're defining reusable COMPONENTS (with structure/behavior/logic) → here (
 </button>
 {% endmacro %}
+{# Form Modals - Specific Ones #}
+{# Centralized place for our Metric Entry modal #}
+{% macro metric_entry_modal(id='metric-entry-dashboard', title='Add Metric') %}
+  {% call modal('/metrics/', id, title) %}
+      <div class="tabs">
+        <button type="button" role="tab" data-tab="steps" class="btn btn-secondary">Steps Entry</button>
+        <button type="button" role="tab" data-tab="weight" class="btn btn-secondary">Weight Entry</button>
+        <button type="button" role="tab" data-tab="sleep" class="btn btn-secondary">Sleep</button>
+        <button type="button" role="tab" data-tab="calories" class="btn btn-secondary">Calories</button>
+      </div>
+      <div role="tabpanel" class="tab-content" id="tab-steps">
+        <div class="form-group">
+          <label for="steps">Steps:</label>
+          <input type="number" id="steps" name="steps" min="0" max="40000" step="1">
+        </div>
+      </div>
+      <div role="tabpanel" class="tab-content" id="tab-weight" hidden>
+        <div class="form-group">
+          <label for="weight">Weight:</label>
+          <input type="number" id="weight" name="weight" min="0" max="500" step="0.1">
+        </div>
+      </div>
+      <div role="tabpanel" class="tab-content" id="tab-calories" hidden>
+        <div class="form-group">
+          <label for="calories">Calories:</label>
+          <input type="number" id="calories" name="calories" min="0" max="10000" step="1">
+        </div>
+      </div>
+      <div role="tabpanel" class="tab-content" id="tab-sleep" hidden>
+        <div class="form-group">
+          <label for="wake_time">Wake Time:</label>
+          <input type="time" id="wake_time" name="wake_time">
+        </div>
+        <div class="form-group">
+          <label for="sleep_time">Sleep Time:</label>
+          <input type="time" id="sleep_time" name="sleep_time">
+        </div>
+      </div>
+  {% endcall %}
+{% endmacro %}
+{% macro time_entry_modal(id='time-entry-dashboard', title='Add Time Entry') %}
+  {% call modal('/time_tracking/', id, title) %}
+    <div class="form-group">
+        <label for="category">Category:</label>
+        <input type="text" id="category" name="category" required>
+    </div>
+    <div class="form-group">
+        <label for="duration">Duration (minutes):</label>
+        <input type="number" id="duration" name="duration" min="0" required>
+    </div>
+    <div class="form-group">
+        <label for="started_at">Started At:</label>
+        <input type="time" id="started_at" name="started_at" required>
+    </div>
+    <div class="form-group">
+        <label for="description">Description (Optional):</label>
+        <input type="text" id="description" name="description">
+    </div>
+  {% endcall %}
+{% endmacro %}
\ No newline at end of file
diff --git a/app/_templates/_partials/_flash.html b/app/_templates/_partials/_flash.html
deleted file mode 100644
index db3d668..0000000
--- a/app/_templates/_partials/_flash.html
+++ /dev/null
@@ -1,10 +0,0 @@
-{% with messages = get_flashed_messages() %}  {# "if flask has any msgs saved, pull them into this variable called messages" #}
-    {% if messages %}
-    <div id="flash-message" class="flash-message">
-        {% for m in messages %}
-        <p>{{ m }}</p>
-        {% endfor %}
-    </div>
-    {% endif %}
-{% endwith %}
\ No newline at end of file
diff --git a/app/_templates/_partials/_navbar.html b/app/_templates/_partials/_navbar.html
index 0fad3bb..34e2afe 100644
--- a/app/_templates/_partials/_navbar.html
+++ b/app/_templates/_partials/_navbar.html
@@ -11,74 +11,82 @@
         </a>
     {% endif %}
 {% endmacro %}
-<nav aria-label="Main navigation">
-    <div class="navbar-content">
-        {# LEFT: Branding & Links #}
-        <div class="nav-left">
-            <a href="{{ url_for('main.home') }}" class="branding">Vesper</a>
-            {# Beginning hamburger menu #}
-            <button id="hamburger-btn"
-                    aria-controls="navlinks" 
-                    aria-expanded="false" 
-                    aria-label="Toggle navigation menu">
-                ☰
-            </button>
-            {# TODO: NOTES: ID makes assistive tech tie btn + navlinks together? #}
-            <div class="navlinks" id="navlinks">
-                {{ nav_link('Home', 'main.home', request.endpoint) }}
+{# TODO: Note: navlinks is the desktop name, need to rename after switching over logic/styling #}
+{% macro navigation_links(type='navlinks') %}
+<div class="{{ type }}" id="{{ type }}">
+    {{ nav_link('Home', 'main.home', request.endpoint) }}
-                {% if current_user.is_authenticated %}
-                    {{ nav_link('Tasks', 'tasks.dashboard', request.endpoint) }}
-                    {{ nav_link('Habits', 'habits.dashboard', request.endpoint) }}
-                    {{ nav_link('Groceries', 'groceries.dashboard', request.endpoint) }}
-                    {{ nav_link('Metrics', 'metrics.dashboard', request.endpoint) }}
-                    {{ nav_link('Time Tracking', 'time_tracking.dashboard', request.endpoint) }}
+    {% if current_user.is_authenticated %}
+        {{ nav_link('Tasks', 'tasks.dashboard', request.endpoint) }}
+        {{ nav_link('Habits', 'habits.dashboard', request.endpoint) }}
+        {{ nav_link('Groceries', 'groceries.dashboard', request.endpoint) }}
+        {{ nav_link('Metrics', 'metrics.dashboard', request.endpoint) }}
+        {{ nav_link('Time Tracking', 'time_tracking.dashboard', request.endpoint) }}
-                    {{ nav_link('Log out', 'auth.logout', request.endpoint )}}
-                {% endif %}
-                {% if current_user.is_anonymous %}
-                    {{ nav_link('Log in', 'auth.login', request.endpoint) }}
-                {% endif %}
+        {{ nav_link('Log out', 'auth.logout', request.endpoint )}}
+    {% endif %}
+    {% if current_user.is_anonymous %}
+        {{ nav_link('Log in', 'auth.login', request.endpoint) }}
+    {% endif %}
+</div>
+{% endmacro %}
+<div class="nav-anchor">
+    <nav aria-label="Main navigation">
+        <div class="navbar-content">
+            {# LEFT: Branding & Links #}
+            <div class="nav-left">
+                <a href="{{ url_for('main.home') }}" class="branding">Vesper</a>
+                <button id="hamburger-btn"
+                        aria-controls="mobilenav" 
+                        aria-expanded="false" 
+                        aria-label="Toggle navigation menu">
+                    ☰
+                </button>
+                {# TODO: NOTES: ID makes assistive tech tie btn + navlinks together? #}
+                {{ navigation_links() }}
             </div>
-        </div>
-        {# Settings modal, theme select, etc. #}
-        <div class="nav-right">
+            {# Settings modal, theme select, etc. #}
+            <div class="nav-right">
+                {# Baby's first modal #}
+                <button id="settings-btn" aria-label="Settings">⚙️</button>
+                {% if has_dev_tools %}
+                <dialog id="settings-modal" class="dev-buttons">
+                    <h3>Hey pal</h3>
+                    <p>My Modal Content</p>
+                    <a href="/my-fake/route" class="btn btn-primary">Test 404</a>
+                    <form action="{{ url_for('auth.reset_dev') }}" method="POST">
+                        <button type="submit" class="btn btn-primary">Reset DEV</button>
+                    </form>
+                    {% if config.APP_ENV == 'dev' %}
+                    <a href="{{ url_for('devtools.style_reference')}}" class="btn btn-secondary">Theme Demo Page</a><br>
+                    {% endif %}
+                    <button type="submit" id="close-dev-modal-btn">Close</button>
+                </dialog>
+                {% endif %}
+                <form>
+                    <fieldset>
+                        {# Legend here is good for accessibility (screen readers) #}
+                        <legend class="visually-hidden">Pick a theme</legend>
+                        {# Pivot this to fancier custom toggle (circle of moon/sun moves from one side to another when clicked) #}
+                        <select name="theme" id="theme">
+                            <option value="laptop">System</option>
+                            <option value="sun">Light</option>
+                            <option value="moon">Dark</option>
+                        </select>
+                    </fieldset>
+                </form>
+            </div>
         </div>
-        {# Baby's first modal #}
-        <button id="settings-btn" aria-label="Settings">⚙️</button>
-        {% if has_dev_tools %}
-        <dialog id="settings-modal" class="dev-buttons">
-            <h3>Hey pal</h3>
-            <p>My Modal Content</p>
-            <a href="/my-fake/route" class="btn btn-primary">Test 404</a>
-            <form action="{{ url_for('auth.reset_dev') }}" method="POST">
-                <button type="submit" class="btn btn-primary">Reset DEV</button>
-            </form>
-            {% if config.APP_ENV == 'dev' %}
-            <a href="{{ url_for('devtools.style_reference')}}" class="btn btn-secondary">Theme Demo Page</a><br>
-            {% endif %}
-            <button type="submit" id="close-dev-modal-btn">Close</button>
-        </dialog>
-        {% endif %}
+    </nav>
-        <form>
-            <fieldset>
-                {# Legend here is good for accessibility (screen readers) #}
-                <legend class="visually-hidden">Pick a theme</legend>
-                {# Pivot this to fancier custom toggle (circle of moon/sun moves from one side to another when clicked) #}
-                <select name="theme" id="theme">
-                    <option value="laptop">System</option>
-                    <option value="sun">Light</option>
-                    <option value="moon">Dark</option>
-                </select>
-            </fieldset>
-        </form>
+    <div id="mobilenav" class="mobilenav">
+        {{ navigation_links('mobilenavlist') }}
     </div>
-</nav>
\ No newline at end of file
+</div>
\ No newline at end of file
diff --git a/app/_templates/base.html b/app/_templates/base.html
index 5ecb149..f3b0d66 100644
--- a/app/_templates/base.html
+++ b/app/_templates/base.html
@@ -9,10 +9,9 @@
     <title>{% block title %}Vesper{% endblock %}</title>
     <link rel="stylesheet" href="{{ url_for('static', filename = 'css/app.css') }}">
     <link rel="icon" type="image/png" href="{{ url_for('static', filename = 'img/favicons/favicon.png') }}">
-    {# nonce: #}
+    {# Sets data-theme value so CSS can apply proper theme from cookie BEFORE the page is fully loaded #}
+    {# Prevents the "flash" of the incorrect theme on page load #}
     <script nonce="{{ nonce }}">
-        // Set data-theme value so CSS can grab & apply proper theme from cookie BEFORE loading rest
-        // Prevents the "Flash of Incorrect Theme of Doom"
         (function () {
             const cookie = document.cookie;
             if (cookie.includes('theme=light')) {
@@ -23,13 +22,13 @@
         })();
     </script>
 </head>
-<body>
+{# Ditching flash() entirely, now we can just make redir routes push needed toast info to session & pull from that #}
+<body data-toast='{{ session.pop("toast", None) | tojson | safe }}'>
     <div class="wrapper">
         <header>
             {% include '_partials/_navbar.html' with context %}
         </header>
-        {% include '_partials/_flash.html' %}
         {{ ui.confirmation_modal() }}
         {{ ui.toast_container() }}
diff --git a/app/_templates/errors/404.html b/app/_templates/errors/404.html
index 25200da..61a6d25 100644
--- a/app/_templates/errors/404.html
+++ b/app/_templates/errors/404.html
@@ -1,4 +1,3 @@
-{# TODO: Implement these #}
 {% extends 'base.html' %}
diff --git a/app/_templates/errors/500.html b/app/_templates/errors/500.html
index e69de29..a8650f5 100644
--- a/app/_templates/errors/500.html
+++ b/app/_templates/errors/500.html
@@ -0,0 +1,16 @@
+{% extends 'base.html' %}
+{% block title %}500 - Error{% endblock %}
+{% block content %}
+<div class="error-page">
+    <h1>500</h1>
+    <p>
+        Experiencing technical difficulties. Please try again in a few minutes.
+    </p>
+    {{ ui.error_link('Back to Safety', 'main.home') }}
+</div>
+{% endblock %}
\ No newline at end of file
diff --git a/app/core/routes.py b/app/core/routes.py
index 32c9456..9010b7e 100644
--- a/app/core/routes.py
+++ b/app/core/routes.py
@@ -1,6 +1,6 @@
-from flask import Blueprint, jsonify, render_template, request
-from flask_login import current_user, login_required
+from flask import Blueprint, render_template
+from flask_login import current_user
 from app._infra.database import database_connection
 from app.modules.habits.repository import HabitsRepository
@@ -17,48 +17,47 @@ def home():
     if not current_user.is_authenticated:
         return render_template('landing_page.html')
-    try:
-        with database_connection() as session:
-            now = datetime_local(current_user.timezone)
-            now_date = now.strftime("%H:%M:%S")
-            now_time = now.strftime("%A, %B %d")
-            if now.hour < 12:
-                greeting = "Good morning"
-            elif now.hour < 18:
-                greeting = "Good afternoon"
-            else:
-                greeting = "Good evening"
-            # Fetch tasks, habits, today_intention
-            habits_repo = HabitsRepository(session, current_user.id, current_user.timezone)
-            tasks_repo = TasksRepository(session, current_user.id, current_user.timezone)
-            habits = habits_repo.get_all_habits()
-            # Get today's frog
-            today_frog = tasks_repo.get_today_frog()
-            # Get all tasks
-            tasks = tasks_repo.get_all_regular_tasks()
-            habit_info = {}
-            for habit in habits:
-                habit_info[habit.id] = {
-                    'completed_today': check_if_completed_today(session, current_user.id, habit.id, current_user.timezone),
-                    'streak_count': calculate_habit_streak(session, current_user.id, habit.id, current_user.timezone)
-                }
-            ### Each key becomes its own top-level var in template (No 'ctx.' prefix required)
-            ctx = {
-                "tasks": tasks,
-                "habits": habits,
-                "today_frog": today_frog,
-                "habit_info": habit_info,
-                "now": now,
-                "now_date": now_date,
-                "now_time": now_time,
-                "greeting": greeting
-            }
-            return render_template("index.html", **ctx)
+    with database_connection() as session:
+        now = convert_to_timezone(current_user.timezone)
+        now_time = now.strftime("%H:%M:%S")
+        now_date = now.strftime("%A, %B %d")
+        if now.hour < 12:
+            greeting = "Good morning"
+        elif now.hour < 18:
+            greeting = "Good afternoon"
+        else:
+            greeting = "Good evening"
+        # Fetch tasks, habits
+        habits_repo = HabitsRepository(session, current_user.id, current_user.timezone)
+        tasks_repo = TasksRepository(session, current_user.id, current_user.timezone)
+        habits = habits_repo.get_all_habits()
+        today_frog = tasks_repo.get_today_frog()
+        tasks = tasks_repo.get_all_regular_tasks()
+        # Get today's leetcode records
+        start_utc, end_utc = today_range(current_user.timezone)
+        leetcode_records = habits_repo.get_all_leetcoderecords_in_window(start_utc, end_utc)
-    except Exception as e:
-        return jsonify({"success": False, "message": str(e)}), 500
+        habit_info = {}
+        for habit in habits:
+            habit_info[habit.id] = {
+                'completed_today': check_if_completed_today(session, current_user.id, habit.id, current_user.timezone),
+                'streak_count': calculate_habit_streak(session, current_user.id, habit.id, current_user.timezone)
+            }
+        ### Each key becomes its own top-level var in template (No 'ctx.' prefix required)
+        ctx = {
+            "tasks": tasks,
+            "habits": habits,
+            "today_frog": today_frog,
+            "habit_info": habit_info,
+            "now": now,
+            "now_date": now_date,
+            "now_time": now_time,
+            "greeting": greeting,
+            "leetcode_records": leetcode_records
+        }
+        return render_template("index.html", **ctx)
diff --git a/app/core/templates/index.html b/app/core/templates/index.html
index a4606bf..ee3134f 100644
--- a/app/core/templates/index.html
+++ b/app/core/templates/index.html
@@ -23,7 +23,7 @@
     <div class="weather-section">
         <div id="weather-temp"></div>
         <div id="weather-sunset"></div>
-        <canvas id="sun-canvas" width="200" height="100"></canvas>
+        <canvas id="sky-canvas"></canvas>
     </div>
 </section>
@@ -34,51 +34,20 @@
     <div>
         <span>Today's Frog: </span>
         <span id="intention-text">
-            {{ today_frog if today_frog else "" }}
+            {{ today_frog.name if today_frog else "" }}
         </span>
+        <ul class="task-list">
+        {% for task in tasks %}
+            <li>{{ task.name }}</li>
+        {% endfor %}
+        </ul>
     </div>
     <div>
         <button class="btn btn-primary" id="time-entry-homepage-btn">Add Time Entry</button>
-        {% call ui.modal('/time_tracking/', 'time-entry-homepage', 'Add Time Entry') %}
-            <div class="form-group">
-                <label for="category">Category:</label>
-                <input type="text" id="category" name="category" required>
-            </div>
-            <div class="form-group">
-                <label for="duration">Duration (minutes):</label>
-                <input type="number" id="duration" name="duration" min="0" required>
-            </div>
-            <div class="form-group">
-                <label for="started_at">Started At:</label>
-                <input type="time" id="started_at" name="started_at" required>
-            </div>
-            <div class="form-group">
-                <label for="description">Description (Optional):</label>
-                <input type="text" id="description" name="description">
-            </div>
-        {% endcall %}
-        <div class="form-group">
-            <label for="weight">Weight:</label>
-            <input class="input-inline" type="number" id="weight" min="0" max="500" step="0.1" name="weight" data-metric="weight" data-unit="lbs" placeholder="lbs">
-        </div>
-        <div class="form-group">
-            <label for="steps">Steps:</label>
-            <input class="input-inline" type="number" id="steps" min="0" max="100000" step="1" name="steps" data-metric="steps" data-unit="steps" placeholder="0">
-        </div>
-        {# TODO: Compute duration from these #}
-        <div class="form-group">
-            <label for="sleep_time">Sleep</label>
-            <input class="input-inline" type="time" id="sleep_time" name="sleep_time">
-        </div>
-        <div class="form-group">
-            <label for="wake_time">Wake</label>
-            <input class="input-inline" type="time" id="wake_time" name="wake_time">
-        </div>
-        <div class="form-group">
-            <label for="calories">Calories</label>
-            <input class="input-inline" type="number" id="calories" min="0" max="10000" step="1" name="calories">
-        </div>
+        {{ ui.time_entry_modal('time-entry-homepage', 'Add Time Entry') }}
+        <button class="btn btn-primary" id="metric-entry-homepage-btn">Add Metric Entry</button>
+        {{ ui.metric_entry_modal('metric-entry-homepage', 'Add Metric Entry') }}
     </div>
 </section>
@@ -91,9 +60,61 @@
         {% call ui.modal('/habits/', 'habit-entry-homepage', 'Add Habit') %}
         <div class="form-group">
             <label for="name">Habit:</label>
-            <input type="text" id="name" name="name"  required>
+            <input type="text" id="name" name="name" required>
         </div>
         {% endcall %}
+        <!-- Leetcode thing -->
+        <span>LeetCode: </span>
+        <span class="editable-cell">{{ leetcode_records[0].id if leetcode_records else "EXAMPLE" }}</span>
+        <button id="leetcode-entry-homepage-btn" class="btn btn-primary">Add LeetCode Record</button>
+        {% call ui.modal('/habits/leetcode_record', 'leetcode-entry-homepage', 'Add LeetCode Record') %}
+            <div class="form-group">
+                <label for="leetcode_id">LeetCode Problem ID:</label>
+                <input type="number" id="leetcode_id" name="leetcode_id" min="1" step="1" required>
+            </div>
+            <fieldset class="radio-row form-group">
+                <legend>Difficulty:</legend>
+                <div>
+                    <input type="radio" id="easy" name="difficulty" value="easy" checked>
+                    <label for="easy">Easy</label>
+                </div>
+                <div>
+                    <input type="radio" id="medium" name="difficulty" value="medium">
+                    <label for="medium">Medium</label>
+                </div>
+                <div>
+                    <input type="radio" id="hard" name="difficulty" value="hard">
+                    <label for="hard">Hard</label>
+                </div>
+            </fieldset>
+            <div class="form-group">
+                <label for="language">Language Used:</label>
+                <select name="language" id="language">
+                    <option value="Python">Python</option>
+                    <option value="JavaScript">JavaScript</option>
+                    <option value="C">C</option>
+                    <option value="C++">C++</option>
+                </select>
+            </div>
+            <fieldset class="radio-row form-group">
+                <legend>Status:</legend>
+                <div>
+                    <input type="radio" id="solved" name="lcstatus" value="solved" checked>
+                    <label for="solved">Solved</label>
+                </div>
+                <div>
+                    <input type="radio" id="attempted" name="lcstatus" value="attempted">
+                    <label for="attempted">Attempted</label>
+                </div>
+                <div>
+                    <input type="radio" id="reviewed" name="lcstatus" value="reviewed">
+                    <label for="reviewed">Reviewed</label>
+                </div>
+            </fieldset>
+        {% endcall %}
         <ul class="habit-list">
         {% for habit in habits %}
             <li class="habit-item {% if habit_info[habit.id].completed_today %}completed{% endif %}">
diff --git a/app/devtools/routes.py b/app/devtools/routes.py
index 279383c..6e23839 100644
--- a/app/devtools/routes.py
+++ b/app/devtools/routes.py
@@ -11,7 +11,7 @@ from flask import Blueprint, jsonify, render_template
 from flask_login import login_required
 from app.shared.constants import DEFAULT_HEALTH_TIMEZONE
-from app.shared.datetime.helpers import datetime_local
+from app.shared.datetime.helpers import convert_to_timezone
 devtools_bp = Blueprint('devtools', __name__, url_prefix='/devtools', template_folder='templates')
@@ -20,7 +20,7 @@ def health_check():
     """Basic health check for monitoring."""
     status = {
         'status': 'healthy',
-        'timestamp': datetime_local(DEFAULT_HEALTH_TIMEZONE)
+        'timestamp': convert_to_timezone(DEFAULT_HEALTH_TIMEZONE)
     }
     return jsonify(status)
diff --git a/app/devtools/templates/style-reference.html b/app/devtools/templates/style-reference.html
index 34c1f1a..fab8fe5 100644
--- a/app/devtools/templates/style-reference.html
+++ b/app/devtools/templates/style-reference.html
@@ -9,7 +9,7 @@
 <span id="style-reference-root"></span>
 {# Getting started with D3.js #}
-<div id="chart-container"></div>
+<!-- <div id="chart-container"></div> -->
 {# Buttons to Trigger Confirmation Modal #}
diff --git a/app/errors.py b/app/errors.py
index 584bc6f..227400b 100644
--- a/app/errors.py
+++ b/app/errors.py
@@ -1,4 +1,5 @@
 from flask import Blueprint, render_template
+import logging
 errors_bp = Blueprint("errors", __name__)
@@ -6,6 +7,10 @@ errors_bp = Blueprint("errors", __name__)
 def not_found_error(error):
     return render_template("errors/404.html"), 404
+@errors_bp.app_errorhandler(Exception)
+def log_uncaught(e: Exception):
+    logging.error("Unhandled exception", exc_info=True)
 @errors_bp.app_errorhandler(500)
 def internal_error(error):
     return render_template("errors/500.html"), 500
\ No newline at end of file
diff --git a/app/modules/api/crud_routes.py b/app/modules/api/crud_routes.py
index 998d047..29141ed 100644
--- a/app/modules/api/crud_routes.py
+++ b/app/modules/api/crud_routes.py
@@ -3,7 +3,7 @@
 from flask import Blueprint, abort, current_app, jsonify, request
 from flask_login import current_user, login_required
-from app._infra.database import database_connection, with_db_session
+from app._infra.database import with_db_session
 from app.modules.auth.service import check_item_ownership
 from app.modules.groceries.models import Product, Transaction
 from app.modules.habits.models import Habit
@@ -37,29 +37,25 @@ def get_model_class(module, subtype: str = "none"):
 @login_required
 @with_db_session
 def item(session, module, subtype, item_id):
-    try:
-        model_class = get_model_class(module, subtype) # so 'tasks', 'none' returns Task class
-        if model_class is None:
-            current_app.logger.warning(f"Unknown model for {module}, {subtype}")
-            abort(404)
-        item = session.get(model_class, item_id)
-        if not item:
-            return jsonify({"success": False, "message": f"{model_class.__name__} not found."}), 404
-        # Ownership check
-        check_item_ownership(item, current_user.id)
-        if request.method == 'PATCH':
-            data = request.get_json()
-            for field, value in data.items():
-                setattr(item, field, value)
-            return jsonify({"success": True, "message": f"Successfully updated {model_class.__name__}"}), 200
-        elif request.method == 'DELETE':
-            safe_delete(session, item)
-            return jsonify({"success": True, "message": f"{model_class.__name__} deleted"}), 200
-    except Exception as e:
-        return jsonify({"success": False, "message": str(e)}), 500
\ No newline at end of file
+    model_class = get_model_class(module, subtype) # so 'tasks', 'none' returns Task class
+    if model_class is None:
+        current_app.logger.warning(f"Unknown model for {module}, {subtype}")
+        abort(404)
+    item = session.get(model_class, item_id)
+    if not item:
+        return jsonify({"success": False, "message": f"{model_class.__name__} not found."}), 404
+    # Ownership check
+    check_item_ownership(item, current_user.id)
+    if request.method == 'PATCH':
+        data = request.get_json()
+        for field, value in data.items():
+            setattr(item, field, value)
+        return jsonify({"success": True, "message": f"Successfully updated {model_class.__name__}"}), 200
+    elif request.method == 'DELETE':
+        safe_delete(session, item)
+        return jsonify({"success": True, "message": f"{model_class.__name__} deleted"}), 200
\ No newline at end of file
diff --git a/app/modules/api/routes.py b/app/modules/api/routes.py
index 4172e90..b7d7bf5 100644
--- a/app/modules/api/routes.py
+++ b/app/modules/api/routes.py
@@ -34,14 +34,15 @@ def my_graph_data():
     return data
 """External API endpoints to call or return data to third-party services. For fetching weather data as well as for our health check."""
-@api_bp.route('/weather/<city>/<units>')
+@api_bp.route('/weather/<city>/<country>/<units>')
 @with_db_session
-def get_weather(session, city, units):
+def get_weather(session, city, country, units):
     """External API call-limiting function to ensure we exceed limits."""
     today = datetime.now(timezone.utc).date()
     api_name = "openweathermap"
     DAILY_CALL_LIMIT = current_app.config.get("OPENWEATHER_DAILY_LIMIT", 700)
-    country = current_app.config.get("OPENWEATHER_COUNTRY", "uk") # TODO: Change default
+    # country = current_app.config.get("OPENWEATHER_COUNTRY", "uk") # TODO: Change default
+    country = country or "uk"
     # Reserve a slot atomically
     reserved_count = reserve_slot(session, api_name, today, DAILY_CALL_LIMIT)
@@ -54,9 +55,7 @@ def get_weather(session, city, units):
     # Build request
     api_key = os.environ.get('OPENWEATHER_API_KEY')
-    # TODO: Pick one & make query params adaptable
     url = f"https://api.openweathermap.org/data/2.5/weather?q={city},{country}&APPID={api_key}&units={units}"
-    # 3.0: url = f"https://api.openweathermap.org/data/3.0/onecall/overview?lat={lat}&lon{lon}&APPID={api_key}&units={units}"
     # Call API, release slot on failure
     try:
diff --git a/app/modules/api/service.py b/app/modules/api/service.py
index ec31e8b..81e9996 100644
--- a/app/modules/api/service.py
+++ b/app/modules/api/service.py
@@ -31,7 +31,7 @@ def release_slot(session, api_name: str, date) -> None:
     session.execute(
         text("""
             UPDATE apicallrecord
-            SET apicallrecord.call_count = GREATEST(apicallrecord.call_count - 1, 0)
+            SET call_count = GREATEST(apicallrecord.call_count - 1, 0)
             WHERE api_called = :a AND date = :d
         """), 
         {"a": api_name, "d": date}
diff --git a/app/modules/auth/routes.py b/app/modules/auth/routes.py
index 57f2f85..8c74159 100644
--- a/app/modules/auth/routes.py
+++ b/app/modules/auth/routes.py
@@ -1,8 +1,7 @@
-import sys
+from flask import Blueprint, redirect, render_template, request, url_for
-from flask import Blueprint, flash, redirect, render_template, request, url_for
 from flask_login import login_required, login_user, logout_user
+from app.shared.middleware import set_toast
 from app._infra.database import database_connection, with_db_session
 from app.modules.auth.models import UserRole
 from app.modules.auth.repository import UsersRepository
@@ -15,22 +14,19 @@ auth_bp = Blueprint('auth', __name__, template_folder='templates')
 @auth_bp.route("/user_dashboard", methods=["GET"])
 def user_dashboard():
     return render_template('user_dashboard.html')
 @auth_bp.route('/logout', methods=["GET", "POST"])
 @login_required
 def logout():
+    set_toast('Logout successful', 'success')
     logout_user()
-    flash("Logout successful.")
     return redirect(url_for("main.home"))
 @auth_bp.route('/login', methods=["GET", "POST"])
 def login():
-    # TODO: STUDY: CSRF, rate limiting, & lockout mechanisms
     if request.method == "POST":
         username = request.form.get("username")
         password = request.form.get("password")
@@ -39,11 +35,8 @@ def login():
             users_repo = UsersRepository(session)
             user = users_repo.get_user_by_username(username)
-            if not user:
-                flash(msg("username_nonexistent", DEFAULT_LANG))
-                return redirect(url_for('auth.login'))
-            elif not user.check_password(password):
-                flash(msg("password_incorrect", DEFAULT_LANG))
+            if not user or not user.check_password(password):
+                set_toast('Invalid login credentials', 'error')
                 return redirect(url_for('auth.login'))
             else:
                 remember = 'remember_user' in request.form
@@ -52,7 +45,7 @@ def login():
     else:
         return render_template('auth/login.html')
 @auth_bp.route('/register', methods=["GET", "POST"])
 def register():
@@ -65,33 +58,25 @@ def register():
         password = form_data.get("password", "")
         name = form_data.get("name", "").strip()
-        try:
-            with database_connection() as session:
-                auth_service = AuthService(session)
-                user, errors = auth_service.register_user(
-                    username=username, password=password, name=name, role=UserRole.USER
-                )
-                if errors:
-                    for e in errors:
-                        flash(e, "error")
-                    return redirect(url_for("auth.register"))
-        except Exception as e:
-            print(f"DEBUG: Validation failed: {e}", file=sys.stderr)
-            flash("hey")
-            return redirect(url_for("auth.register"))
-        flash("Account successfully created!")
+        with database_connection() as session:
+            auth_service = AuthService(session)
+            user, errors = auth_service.register_user(
+                username=username, password=password, name=name, role=UserRole.USER
+            )
+            if errors:
+                for e in errors:
+                    set_toast(e, 'error')
+                return redirect(url_for("auth.register"))
+        set_toast('Account successfully created!', 'success')
         return redirect(url_for("main.home"))
 # Create & Seed only
 @auth_bp.route('/init-demo', methods=["POST"])
 def init_demo():
-    # Boot logged in users first just in case
     try:
-        logout_user()
+        logout_user() # boot logged in users just in case
     except Exception:
         pass
@@ -100,7 +85,7 @@ def init_demo():
         demo_user = auth_service.get_or_create_demo_user()
         login_user(demo_user)
-    flash(msg("demo_ready", DEFAULT_LANG))
+    set_toast('Welcome to the demo!', 'success')
     return redirect(url_for('main.home'))
 """
@@ -125,7 +110,7 @@ def reset_users(session): # <= @with_db_session injects session as 1st parameter
     demo_user = auth_service.get_or_create_demo_user()
     owner_user = auth_service.get_or_create_owner_user()
-    flash(msg("db_reset_users", DEFAULT_LANG))
+    set_toast('Users reset!', 'success')
     return redirect(url_for('auth.login'))
 # Wipe app data only; reset IDs for more predictable seeding
@@ -137,7 +122,7 @@ def reset_database(session):
     delete_all_db_data(session, include_users=False, reset_sequences=True)
-    flash(msg("db_reset", DEFAULT_LANG))
+    set_toast('DB reset!', 'success')
     return redirect(url_for('main.home'))
@@ -152,5 +137,5 @@ def reset_dev(session):
     auth_service = AuthService(session)
     owner_user = auth_service.get_or_create_owner_user()
-    flash(msg("db_reset_dev", DEFAULT_LANG))
+    set_toast('DEV: DB reset!', 'success')
     return redirect(url_for('main.home'))
diff --git a/app/modules/groceries/repository.py b/app/modules/groceries/repository.py
index 9317b6a..e858fe9 100644
--- a/app/modules/groceries/repository.py
+++ b/app/modules/groceries/repository.py
@@ -48,15 +48,14 @@ class GroceriesRepository(BaseRepository):
 		).first()
 	def get_or_create_product(self, **product_data):
-		"""Get existing product or create new one."""
+		"""Get existing product or create new one. Returns tuple (product, was_created)."""
 		barcode = product_data["barcode"]
 		product = self.get_product_by_barcode(barcode)
 		if product:
-			return product
-		return self.create_product(**product_data)
+			return product, False
+		return self.create_product(**product_data), True
 	def create_product(self, **product_data) -> Product:
-		# TODO: Invoke validators here!
 		product = Product(
 			barcode=product_data["barcode"],
 			name=product_data["name"],
@@ -70,6 +69,7 @@ class GroceriesRepository(BaseRepository):
 		return product
 	def create_transaction(self, product, **product_data):
+		# TODO: belongs in VALIDATORS!
 		if product is None:
 			raise ValueError("Product must be provided for transaction.")
diff --git a/app/modules/groceries/routes.py b/app/modules/groceries/routes.py
index a718401..6bcac04 100644
--- a/app/modules/groceries/routes.py
+++ b/app/modules/groceries/routes.py
@@ -1,127 +1,121 @@
-import sys
-from flask import (Blueprint, flash, jsonify, redirect, render_template,
+from flask import (Blueprint, jsonify, redirect, render_template,
                    request, url_for)
 from flask_login import current_user, login_required
+from flask import session as fsession
-from app._infra.database import database_connection
+from app._infra.database import database_connection, with_db_session
 from app.modules.groceries.viewmodels import ProductPresenter, TransactionPresenter, ProductViewModel, TransactionViewModel
 from app.modules.groceries.pricing import get_price_per_100g
 from app.modules.groceries.repository import GroceriesRepository
 from app.modules.groceries.service import GroceriesService
-from app.modules.groceries.validators import validate_product_data
-from app.shared.sorting import bubble_sort
+from app.modules.groceries.validators import validate_and_parse_product_data
+from app.shared.middleware import set_toast
 groceries_bp = Blueprint('groceries', __name__, template_folder="templates", url_prefix="/groceries")
 @groceries_bp.route("/dashboard", methods=["GET"])
 @login_required
-def dashboard():
-    try:
-        with database_connection() as session:
-            # Fetch products and transactions
-            groceries_repo = GroceriesRepository(session, current_user.id, current_user.timezone)
-            products = groceries_repo.get_all_products()
-            transactions = groceries_repo.get_all_transactions()
+@with_db_session
+def dashboard(session):
+    groceries_repo = GroceriesRepository(session, current_user.id, current_user.timezone)
+    products = groceries_repo.get_all_products()
+    transactions = groceries_repo.get_all_transactions()
+    for transaction in transactions:
+        transaction.price_per_100g = get_price_per_100g(transaction)
+    txn_viewmodels = [TransactionViewModel(t, current_user.timezone) for t in transactions]
+    prod_viewmodels = [ProductViewModel(p, current_user.timezone) for p in products]
+    ctx = {
+        "products": prod_viewmodels,
+        "transactions": txn_viewmodels,
+        "product_headers": ProductPresenter.build_columns(),
+        "transaction_headers": TransactionPresenter.build_columns(),
+    }
+    return render_template("groceries/dashboard.html", **ctx)
-            # Compute price_per_100g using our util function => add as new attribute! Thanks SQLAlchemy
-            # TODO: MINOR: Fold this into an instance method for Transaction model?
-            for transaction in transactions:
-                transaction.price_per_100g = get_price_per_100g(transaction)
-            txn_viewmodels = [TransactionViewModel(t, current_user.timezone) for t in transactions]
-            prod_viewmodels = [ProductViewModel(p, current_user.timezone) for p in products]
-            ctx = {
-                "products": prod_viewmodels,
-                "transactions": txn_viewmodels,
-                "product_headers": ProductPresenter.build_columns(),
-                "transaction_headers": TransactionPresenter.build_columns(),
-            }
-            return render_template(
-                "groceries/dashboard.html", **ctx)
-    except Exception as e:
-        return jsonify({"success": False, "message": str(e)}), 500
 @groceries_bp.route("/products", methods=["GET", "POST"])
 @login_required
 def products():
-    try:
-        if request.method == "POST":           
-            # Parse & sanitize form data
-            product_data = {
-                "barcode": request.form.get("barcode"),
-                "name": request.form.get("name"),
-                "category": request.form.get("category"),
-                "net_weight": float(request.form.get("net_weight", 0)),
-                "unit_type": request.form.get("unit_type"),
-                "calories_per_100g": request.form.get("calories_per_100g")
-            }
-            # Validate
-            errors = validate_product_data(product_data)
-            if errors:
-                for e in errors:
-                    flash(e, "error")
-                return redirect(url_for('groceries.products')) # back to form if errors
+    if request.method == "POST":
+        product_data = {
+            "barcode": request.form.get("barcode"),
+            "name": request.form.get("name"),
+            "category": request.form.get("category"),
+            "net_weight": float(request.form.get("net_weight", 0)),
+            "unit_type": request.form.get("unit_type"),
+            "calories_per_100g": request.form.get("calories_per_100g")
+        }
+        errors = validate_and_parse_product_data(product_data)
+        if errors:
+            fsession['form_data'] = request.form.to_dict() # save form_data for UX
+            for e in errors:
+                set_toast(e, 'error') # TODO: debug - can we handle multiple at all?
+            return redirect(url_for('groceries.products'))
+        # Handle database errors specifically
+        try:
             with database_connection() as session:
                 groceries_repo = GroceriesRepository(session, current_user.id, current_user.timezone)
-                groceries_repo.get_or_create_product(**product_data)
-                flash("Product added successfully.")
+                product, was_created = groceries_repo.get_or_create_product(**product_data)
+                if was_created:
+                    set_toast('Product added successfully', 'success')
+                else:
+                    set_toast('Product already exists, using existing entry', 'info')
                 return redirect(url_for("groceries.dashboard"))
-        else:
-            return render_template("groceries/add_product.html")
-    except Exception as e:
-        return jsonify({"success": False, "message": str(e)}), 500
+        except Exception as e:
+            fsession['form_data'] = request.form.to_dict()
+            set_toast('Something went wrong. Please try again.', 'error')
+            return redirect(url_for('groceries.products'))
+    else:
+        return render_template("groceries/add_product.html")
-# TODO: This is god-awful
 @groceries_bp.route("/transactions", methods=["GET", "POST"])
 @login_required
 def transactions():
-    try:
-        if request.method == "POST":
-            with database_connection() as session:
-                groceries_repo = GroceriesRepository(session, current_user.id, current_user.timezone)
-                groceries_service = GroceriesService(groceries_repo)
-                # Process form data in service
-                form_data = request.form.to_dict()
-                result = groceries_service.process_transaction_form(form_data)
-                print(f"ALPHA 2.5: error={not result['success']}", file=sys.stderr)
-                # Handle error(s)
-                if not result['success']:
-                    flash(result['message'])
-                    return render_template(
-                        "groceries/add_transaction.html",
-                        show_product_fields=result['show_product_fields'],
-                        transaction_data=result['form_data']
-                    )
+    if request.method == "POST":
+        with database_connection() as session:
+            groceries_repo = GroceriesRepository(session, current_user.id, current_user.timezone)
+            groceries_service = GroceriesService(groceries_repo)
+            # Process form data in service
+            form_data = request.form.to_dict()
+            result = groceries_service.process_transaction_form(form_data)
+            # Handle error(s)
+            if not result['success']:
+                fsession['form_data'] = form_data
+                if result['error_type'] == 'product_not_found':
+                    fsession['show_product_fields'] = True
+                set_toast(result['message'], 'error')
+                return redirect(url_for('groceries.transactions'))
+            # Success
+            set_toast(result['message'], 'success')
+            # Handle action-based redirects
+            action = request.form.get("action")
+            if action == "submit":
+                return redirect(url_for("groceries.dashboard"))
+            elif action == "next_item":
+                return redirect(url_for("groceries.add_transaction"))
-                # Success
-                flash(result['message'])
-                print("Transaction added!!!", file=sys.stderr)
-                # TODO: Move next_item to being a checkbox, not its own button
-                # Handle action-based redirects
-                action = request.form.get("action")
-                if action == "submit":
-                    return redirect(url_for("groceries.dashboard"))
-                elif action == "next_item":
-                    return redirect(url_for("groceries.add_transaction"))
-            return redirect(url_for("groceries.dashboard"))
-        elif request.method == "GET":
-            barcode = request.args.get("barcode")
-            return render_template(
-                "groceries/add_transaction.html",
-                barcode=barcode,
-                show_product_fields=False, # Hide product fields to start
-                transaction_data={} # For the "first" time add_transaction to prevent "undefined transaction_data"
-            )
-    except Exception as e:
-        return jsonify({"success": False, "message": str(e)}), 500
\ No newline at end of file
+        return redirect(url_for("groceries.dashboard"))
+    elif request.method == "GET":
+        saved_form_data = fsession.pop('form_data', {})
+        show_product_fields = fsession.pop('show_product_fields', False)
+        barcode = request.args.get("barcode")
+        return render_template(
+            "groceries/add_transaction.html",
+            barcode=barcode,
+            show_product_fields=show_product_fields,
+            transaction_data=saved_form_data
+        )
\ No newline at end of file
diff --git a/app/modules/groceries/service.py b/app/modules/groceries/service.py
index 7b756a9..1ffe357 100644
--- a/app/modules/groceries/service.py
+++ b/app/modules/groceries/service.py
@@ -19,9 +19,8 @@ class GroceriesService:
         if error:
             return {
                 "success": False,
-                "message": "Error",
-                "show_product_fields": False,
-                "form_data": form_data
+                "message": error,
+                "error_type": "validation_failed"
             }
         # Check if product exists
@@ -49,6 +48,5 @@ class GroceriesService:
             return {
                 "success": False,
                 "message": "Associated product not found. Please add product info.",
-                "show_product_fields": True,
-                "form_data": form_data
+                "error_type": "product_not_found"
             }
\ No newline at end of file
diff --git a/app/modules/groceries/templates/groceries/add_transaction.html b/app/modules/groceries/templates/groceries/add_transaction.html
index cba6c94..2ee5653 100644
--- a/app/modules/groceries/templates/groceries/add_transaction.html
+++ b/app/modules/groceries/templates/groceries/add_transaction.html
@@ -24,7 +24,6 @@
             <div class="form-group {% if not show_product_fields %}hidden{% endif %}">
                 <label for="name">Product Name</label>
                 <input type="text" id="name" name="name"
                     {% if not show_product_fields%}disabled{% endif %}>
             </div>
             <div class="form-group">
diff --git a/app/modules/groceries/templates/groceries/dashboard.html b/app/modules/groceries/templates/groceries/dashboard.html
index 377aa5c..2bc7fa8 100644
--- a/app/modules/groceries/templates/groceries/dashboard.html
+++ b/app/modules/groceries/templates/groceries/dashboard.html
@@ -11,45 +11,14 @@
             Log New Transaction
         </a>
     </div>
-    <table class="table-standard">
-        <caption class="sr-only">Grocery - Recent Transactions</caption>
-        <thead class="table-header">
-            <tr>
-                {% if has_dev_tools %}
-                    <th>ID</th>
-                {% endif %}
-                {% for h in transaction_headers %}
-                    <th>{{ h.label }}</th>
-                {% endfor %}
-            </tr>
-        </thead>
-        <tbody>
-            {% if transactions %}
-                {% for t in transactions %}
-                <tr class="table-row" data-item-id="{{ t.id }}" data-module="groceries" data-subtype="transaction">
-                    {% if has_dev_tools %}
-                        <td>{{ t.id }}</td>
-                    {% endif %}
-                    <td>{{ t.barcode }}</td>
-                    <td>{{ t.product_name }}</td>
-                    <td>{{ t.price_label }}</td>
-                    <td>{{ t.quantity }}</td>
-                    <td class="text-right">{{ t.created_at_label }}</td>
-                    <td class="text-right">{{ t.price_per_100g_label }}</td>
-                    <td class="table-cell delete-cell">
-                        {{ ui.delete_btn() }}
-                    </td>
-                </tr>
-                {% endfor %}
-            {% else %}
-                <tr>
-                    <td colspan="999" class="table-empty">
-                        No transactions yet.
-                    </td>
-                </tr>
-            {% endif %}
-        </tbody>
-    </table>
+    {% call(item, headers) ui.responsive_table('Recent Transactions', transaction_headers, transactions, 'groceries', 'transaction') %}
+    <td class="{{ headers[0].priority }}">{{ item.barcode }}</td>
+    <td class="{{ headers[1].priority }}">{{ item.product_name }}</td>
+    <td class="{{ headers[2].priority }}">{{ item.price_label }}</td>
+    <td class="{{ headers[3].priority }}">{{ item.quantity }}</td>
+    <td class="{{ headers[4].priority }} text-right">{{ item.created_at_label }}</td>
+    <td class="{{ headers[5].priority }} text-right">{{ item.price_per_100g_label }}</td>
+    {% endcall %}
 </div>
 <div class="card-dashboard">
@@ -59,44 +28,13 @@
             Add New Product
         </a>
     </div>
-    <table class="table-standard">
-        <caption class="sr-only">Product Catalog</caption>
-        <thead class="table-header">
-            <tr>
-                {% if has_dev_tools %}
-                    <th>ID</th>
-                {% endif %}
-                {% for h in product_headers %}
-                    <th>{{ h.label }}</th>
-                {% endfor %}
-            </tr>
-        </thead>
-        <tbody>
-            {% if products %}
-                {% for p in products %}
-                <tr class="group table-row" data-item-id="{{ p.id }}" data-module="groceries" data-subtype="product">
-                    {% if has_dev_tools %}
-                        <td>{{ p.id }}</td>
-                    {% endif %}
-                    <td>{{ p.barcode }}</td>
-                    <td>{{ p.name }}</td>
-                    <td class="text-right">{{ p.category }}</td>
-                    <td class="text-right">{{ p.net_weight_display }}</td>
-                    <td class="text-right">{{ p.calories_display }}</td>
-                    <td class="table-cell delete-cell">
-                        {{ ui.delete_btn() }}
-                    </td>
-                </tr>
-                {% endfor %}
-            {% else %}
-                <tr>
-                    <td colspan="999" class="table-empty">
-                        No products yet.
-                    </td>
-                </tr>
-            {% endif %}
-        </tbody>
-    </table>
+    {% call(item, headers) ui.responsive_table('Product Catalog', product_headers, products, 'groceries', 'product') %}
+        <td class="{{ headers[0].priority }}">{{ item.barcode }}</td>
+        <td class="{{ headers[1].priority }}">{{ item.name }}</td>
+        <td class="{{ headers[2].priority }} text-right">{{ item.category }}</td>
+        <td class="{{ headers[3].priority }} text-right">{{ item.net_weight_display }}</td>
+        <td class="{{ headers[4].priority }} text-right">{{ item.calories_display }}</td>
+    {% endcall %}
 </div>
 {% endblock %}
diff --git a/app/modules/groceries/validators.py b/app/modules/groceries/validators.py
index df5a1ce..f32fb60 100644
--- a/app/modules/groceries/validators.py
+++ b/app/modules/groceries/validators.py
@@ -42,7 +42,7 @@ def parse_and_validate_form_data(form_data):
-def validate_product_data(product_data):
+def validate_and_parse_product_data(product_data):
 	errors = []
 	if not product_data.get("name"):
diff --git a/app/modules/groceries/viewmodels.py b/app/modules/groceries/viewmodels.py
index db98cb3..8ede8b1 100644
--- a/app/modules/groceries/viewmodels.py
+++ b/app/modules/groceries/viewmodels.py
@@ -1,25 +1,20 @@
-from app.shared.view_mixins import TimestampedViewMixin
+from app.shared.view_mixins import TimestampedViewMixin, BasePresenter
-class TransactionPresenter:
+class TransactionPresenter(BasePresenter):
     VISIBLE_COLUMNS = [
         "barcode", "product_name", "price_at_scan", "quantity", "created_at", "price_per_100g"
     ]
-    COLUMN_LABELS = {
-		"id": "ID",
-        "product_name": "Product Name",
-		"product_id": "Product ID",
-		"price_at_scan": "Price",
-		"quantity": "Qty",
-		"created_at": "Date",
-        "price_per_100g": "Per 100g",
-        "barcode": "Barcode"
-	}
-    @classmethod
-    def build_columns(cls) -> list[dict]:
-        return [{"key": c, "label": cls.COLUMN_LABELS.get(c, c)} for c in cls.VISIBLE_COLUMNS]
+    COLUMN_CONFIG = {
+    "barcode": {"label": "Barcode", "priority": "desktop-only"},
+    "product_name": {"label": "Product Name", "priority": "essential"},
+    "price_at_scan": {"label": "Price", "priority": "essential"},
+    "quantity": {"label": "Qty", "priority": "desktop-only"},
+    "created_at": {"label": "Date", "priority": "essential"},
+    "price_per_100g": {"label": "Per 100g", "priority": "desktop-only"}
+    }
 class TransactionViewModel(TimestampedViewMixin):
     def __init__(self, txn, tz):
@@ -47,25 +42,22 @@ class TransactionViewModel(TimestampedViewMixin):
-class ProductPresenter:
+class ProductPresenter(BasePresenter):
     VISIBLE_COLUMNS = [
         "barcode", "name", "category", "net_weight_display", "calories_per_100g"
     ]
-    COLUMN_LABELS = {
-		"id": "ID",
-		"name": "Product Name",
-		"category": "Category",
-		"barcode": "Barcode",
-		"net_weight_display": "Net Weight",
-		"unit_type": "Unit",
-		"calories_per_100g": "Cals per 100g",
-		"created_at": "Created",
-	}
+    COLUMN_CONFIG = {
+        "id": {"label": "ID", "priority": "desktop-only"},
+        "name": {"label": "Product Name", "priority": "essential"},
+        "category": {"label": "Category", "priority": "desktop-only"},
+        "barcode": {"label": "Barcode", "priority": "desktop-only"},
+        "net_weight_display": {"label": "Net Weight", "priority": "desktop-only"},
+        "unit_type": {"label": "Unit", "priority": "desktop-only"},
+        "calories_per_100g": {"label": "Cals per 100g", "priority": "desktop-only"},
+        "created_at": {"label": "Created", "priority": "desktop-only"}
+    }
-    @classmethod
-    def build_columns(cls) -> list[dict]:
-        return [{"key": c, "label": cls.COLUMN_LABELS.get(c, c)} for c in cls.VISIBLE_COLUMNS]
 class ProductViewModel(TimestampedViewMixin):
     def __init__(self, product, tz):
diff --git a/app/modules/habits/models.py b/app/modules/habits/models.py
index 55cc00a..e6a5c90 100644
--- a/app/modules/habits/models.py
+++ b/app/modules/habits/models.py
@@ -22,6 +22,21 @@ class Status(enum.Enum):
     experimental = "experimental"
     established = "established"
+class LCStatus(enum.Enum):
+    SOLVED = "solved"
+    ATTEMPTED = "attempted"
+    REVIEWED = "reviewed"
+class Difficulty(enum.Enum):
+    EASY = "easy"
+    MEDIUM = "medium"
+    HARD = "hard"
+class Language(enum.Enum):
+    PYTHON = "Python"
+    JS = "JavaScript"
+    CPP = "C++"
+    C = "C"
 class Habit(Base):
@@ -48,3 +63,11 @@ class HabitCompletion(Base):
     habit_id = Column(Integer, ForeignKey('habit.id'))
+## Uncertain about this placement, but keeps things logically consistent for now
+class LeetCodeRecord(Base):
+    leetcode_id = Column(Integer, nullable=False)
+    title = Column(String(255))
+    difficulty = Column(SAEnum(Difficulty), default=Difficulty.MEDIUM, nullable=False)
+    language = Column(SAEnum(Language), default=Language.PYTHON, nullable=False)
+    status = Column(SAEnum(LCStatus), default=LCStatus.SOLVED, nullable=False)
\ No newline at end of file
diff --git a/app/modules/habits/repository.py b/app/modules/habits/repository.py
index 5a6aa3b..74d144e 100644
--- a/app/modules/habits/repository.py
+++ b/app/modules/habits/repository.py
@@ -4,10 +4,10 @@ If it touches the DB directly, it belongs here.
 """
 from sqlalchemy.orm import selectinload
+from datetime import datetime
 from app.shared.repository.base import BaseRepository
-from .models import Habit, HabitCompletion
+from .models import Habit, HabitCompletion, LeetCodeRecord
 class HabitsRepository(BaseRepository):
@@ -36,10 +36,11 @@ class HabitsRepository(BaseRepository):
         self.session.flush()
         return habit
-    def create_habit_completion(self, habit_id: int):
+    def create_habit_completion(self, habit_id: int, created_at: datetime | None = None):
         habit_completion = HabitCompletion(
             habit_id=habit_id,
-            user_id=self.user_id
+            user_id=self.user_id,
+            created_at=created_at
         )
         self.session.add(habit_completion)
         return habit_completion
@@ -79,4 +80,23 @@ class HabitsRepository(BaseRepository):
                 HabitCompletion.created_at < end_utc
             )
             .first()
-        )
\ No newline at end of file
+        )
+    def create_leetcoderecord(self, leetcode_id: int, difficulty, language, lcstatus, title: str | None = None):
+        new_record = LeetCodeRecord(
+            user_id=self.user_id,
+            leetcode_id=leetcode_id,
+            title=title,
+            difficulty=difficulty, # Note: can pass the enum member itself, no need for .value
+            language=language,
+            status=lcstatus
+        )
+        self.session.add(new_record)
+        self.session.flush()
+        return new_record
+    def get_all_leetcoderecords_in_window(self, start_utc, end_utc) -> list[LeetCodeRecord]:
+        return self.session.query(LeetCodeRecord).filter(
+            LeetCodeRecord.created_at >= start_utc,
+            LeetCodeRecord.created_at < end_utc
+        ).all()
\ No newline at end of file
diff --git a/app/modules/habits/routes.py b/app/modules/habits/routes.py
index 7b054c4..5421cd8 100644
--- a/app/modules/habits/routes.py
+++ b/app/modules/habits/routes.py
@@ -10,6 +10,7 @@ from app.shared.datetime.helpers import (day_range, parse_js_instant,
                                          today_range)
 from app.shared.sorting import bubble_sort
 from app.modules.habits.viewmodels import HabitPresenter, HabitViewModel
+from app.modules.habits.models import Difficulty, Language, LCStatus
 habits_bp = Blueprint('habits', __name__, template_folder="templates", url_prefix="/habits")
@@ -29,7 +30,6 @@ def dashboard(session):
     }
     return render_template("habits/dashboard.html", **ctx)
-# CREATE
 @habits_bp.route("/", methods=["GET", "POST"])
 @login_required
 @with_db_session
@@ -54,25 +54,25 @@ def habits(session):
 def completions(session, habit_id):
     try:
         body = request.get_json() # returns dict, parse JSON body of POST fetch
+        if not body:
+            return jsonify({"success": False, "message": "Invalid JSON"}), 400
         completed_at = parse_js_instant(body["completed_at"])
+    except (KeyError, ValueError, TypeError) as e:
+        return jsonify({"success": False, "message": "Invalid request data"}), 400
+    habits_repo = HabitsRepository(session, current_user.id, current_user.timezone)
+    habit = habits_repo.get_habit_by_id(habit_id)
-        habits_repo = HabitsRepository(session, current_user.id, current_user.timezone)
-        habit = habits_repo.get_habit_by_id(habit_id)
-        if not habit:
-            return jsonify({"success": False, "message": "Habit not found"}), 404
-        habit_completion = habits_repo.create_habit_completion(habit_id)
-        return jsonify({"success": True, "message": "Habit marked complete"}), 201
-    except Exception:
-        return jsonify({"success": False, "message": "Failed to mark habit complete"}), 500
+    if not habit:
+        return jsonify({"success": False, "message": "Habit not found"}), 404
+    habit_completion = habits_repo.create_habit_completion(habit_id, completed_at)
+    return jsonify({"success": True, "message": "Habit marked complete"}), 201
-# Deletes a given HabitCompletion record (acts as our "habit marked complete")
-# For now, we'll only allow habits to have a single completion record in a given day
-# BUT this is now flexible enough to allow for choosing the day whose completion we wish to delete
-@habits_bp.route("/<int:habit_id>/completions", methods=["DELETE"])
+# Note: JS-side is flexible enough to delete any given date's completion
+@habits_bp.route("/<int:habit_id>/completion", methods=["DELETE"])
 @login_required
 @with_db_session
 def completion(session, habit_id):
@@ -95,6 +95,35 @@ def completion(session, habit_id):
         return jsonify({"success": True, "message": "Habit unmarked as complete"}), 200
     else:
         return jsonify({"success": False, "message": "No completion found for today"}), 404
+@habits_bp.route("/leetcode_record", methods=["POST"])
+@login_required
+@with_db_session
+def create_leetcoderecord(session):
+    form_data = request.form.to_dict()
+    try:
+        form_data["difficulty"] = Difficulty(form_data["difficulty"])
+        form_data["language"] = Language(form_data["language"])
+        form_data["lcstatus"] = LCStatus(form_data["lcstatus"])
+    except ValueError as e:
+        return jsonify({"success": False, "message": str(e)}), 400
+    form_data["leetcode_id"] = int(form_data["leetcode_id"])
+    habits_repo = HabitsRepository(session, current_user.id, current_user.timezone)
+    new_record = habits_repo.create_leetcoderecord(**form_data)
-    # except Exception:
-    #     return jsonify({"success": False, "message": "Failed to unmark habit"}), 500 # 500 = Internal Server Error
\ No newline at end of file
+    return jsonify({
+        "success": True,
+        "message": "LeetCode record added",
+        "new_record": {
+            "id": new_record.id,
+            "leetcode_id": new_record.leetcode_id,
+            "title": new_record.title,
+            "difficulty": new_record.difficulty.value,
+            "language": new_record.language.value,
+            "lcstatus": new_record.status.value
+        }
+    })
\ No newline at end of file
diff --git a/app/modules/habits/templates/habits/dashboard.html b/app/modules/habits/templates/habits/dashboard.html
index cd6d820..adbe943 100644
--- a/app/modules/habits/templates/habits/dashboard.html
+++ b/app/modules/habits/templates/habits/dashboard.html
@@ -9,49 +9,18 @@
         <label for="name">Habit:</label>
         <input type="text" id="name" name="name"  required>
     </div>
-{% endcall%}
+{% endcall %}
 <div class="card-dashboard">
     <div class="card-header">
         <h2 class="card-title">Habits</h2>
         <button id="habit-entry-dashboard-btn" class="btn btn-primary">Add Habit</button>
     </div>
-    <table class="table-standard">
-        <caption class="sr-only">Habits</caption>
-        <thead class="table-header">
-            <tr>
-                {% if has_dev_tools %}
-                    <th>ID</th>
-                {% endif %}
-                {% for h in headers %}
-                    <th>{{ h.label }}</th>
-                {% endfor %}
-            </tr>
-        </thead>
-        <tbody>
-            {% if habits %}
-                {% for h in habits %}
-                <tr class="table-row" data-item-id="{{ h.id }}" data-module="habits" data-subtype="none">
-                    {% if has_dev_tools %}
-                        <td>{{ h.id }}</td>
-                    {% endif %}
-                    <td class="editable-cell tooltip" data-item-id="{{ h.id }}" data-module="habits" data-field="name" data-tip="Double-click to edit field.">{{ h.name }}</td>
-                    <td>{{ h.status_label }}</td>
-                    <td>{{ h.created_at_label }}</td>
-                    <td class="table-cell delete-cell">
-                        {{ ui.delete_btn() }}
-                    </td>
-                </tr>
-                {% endfor %}
-            {% else %}
-                <tr>
-                    <td colspan="999" class="table-empty">
-                        No habits yet.
-                    </td>
-                </tr>
-            {% endif %}
-        </tbody>
-    </table>
+    {% call(item, headers) ui.responsive_table('Habits', headers, habits, 'habits', 'none') %}
+        <td class="{{ headers[0].priority}} editable-cell tooltip" data-item-id="{{ item.id }}" data-module="habits" data-field="name" data-tip="Double-click to edit field.">{{ item.name }}</td>
+        <td class="{{ headers[1].priority}}">{{ item.status_label }}</td>
+        <td class="{{ headers[2].priority}}">{{ item.created_at_label }}</td>
+    {% endcall %}
 </div>
 {% endblock %}
diff --git a/app/modules/habits/viewmodels.py b/app/modules/habits/viewmodels.py
index 975910d..b8d46be 100644
--- a/app/modules/habits/viewmodels.py
+++ b/app/modules/habits/viewmodels.py
@@ -1,24 +1,20 @@
-from app.shared.view_mixins import TimestampedViewMixin
+from app.shared.view_mixins import TimestampedViewMixin, BasePresenter
-class HabitPresenter:
+class HabitPresenter(BasePresenter):
     VISIBLE_COLUMNS = [
         "name", "status", "created_at"
     ]
-    # Human-readable column names
-    COLUMN_LABELS = {
-        "id": "ID",
-        "name": "Name",
-        "tags": "Tag(s)",
-        "status": "Status",
-        "created_at": "Created",
-        "established_date": "Date Promoted",
-        "promotion_threshold": "Promotion Threshold"
+    COLUMN_CONFIG = {
+        "id": {"label": "ID", "priority": "desktop-only"},
+        "name": {"label": "Name", "priority": "essential"},
+        "tags": {"label": "Tag(s)", "priority": "desktop-only"},
+        "status": {"label": "Status", "priority": "essential"},
+        "created_at": {"label": "Created", "priority": "desktop-only"},
+        "established_date": {"label": "Date Promoted", "priority": "desktop-only"},
+        "promotion_threshold": {"label": "Promotion Threshold", "priority": "desktop-only"}
     }
-    @classmethod
-    def build_columns(cls) -> list[dict]:
-        return [{"key": c, "label": cls.COLUMN_LABELS.get(c, c)} for c in cls.VISIBLE_COLUMNS]
 class HabitViewModel(TimestampedViewMixin):
     def __init__(self, habit, tz):
diff --git a/app/modules/metrics/repository.py b/app/modules/metrics/repository.py
index 17e7d6c..833ba79 100644
--- a/app/modules/metrics/repository.py
+++ b/app/modules/metrics/repository.py
@@ -27,7 +27,7 @@ class DailyMetricsRepository(BaseRepository):
         ).all()
     def create_or_update_daily_metric(self, metric_type: str, value: int | float | time, start_utc: datetime, end_utc: datetime):
-        """Create new daily metric or update existing one for given date."""
+        """Create new daily metric or update existing one for given date. Returns tuple (entry, was_created)."""
         if not hasattr(DailyEntry, metric_type):
             raise ValueError(f"Invalid metric: {metric_type}")
@@ -37,8 +37,8 @@ class DailyMetricsRepository(BaseRepository):
             setattr(entry, metric_type, value) # dynamically set entry.weight = value
         else:
             entry = DailyEntry(user_id=self.user_id, **{metric_type: value})
-            self.session.add(entry)
-        return entry
+            self.session.add(entry), True
+        return entry, False
     def create_daily_metric(self, metric_type: str, value: int | float | time):
         """Create & add a new daily metric. Returns metric."""
diff --git a/app/modules/metrics/routes.py b/app/modules/metrics/routes.py
index 51f4b1d..6a689f2 100644
--- a/app/modules/metrics/routes.py
+++ b/app/modules/metrics/routes.py
@@ -30,22 +30,21 @@ def dashboard(session):
 @metrics_bp.route("/", methods=["POST"])
 @login_required
-def metrics():
-    data = request.get_json()
-    try:
-        with database_connection() as session:
-            # Instantiate our repository
-            repo = DailyMetricsRepository(session, current_user.id, current_user.timezone)
-            # TODO: Validators.py
-            metric_type=data["metric_type"]
-            value=data["value"]
-            start_utc, end_utc = today_range(current_user.timezone)
-            new_metric = repo.create_or_update_daily_metric(metric_type, value, start_utc, end_utc)
-            return jsonify({"success": True, "message": "Successfully added metric"}), 201
-    # TODO: Security - don't expose internal errors to users, need to adjust
-    except Exception as e:
-        return jsonify({"success": False, "message": str(e)}), 500
\ No newline at end of file
+@with_db_session
+def metrics(session):
+    repo = DailyMetricsRepository(session, current_user.id, current_user.timezone)
+    # TODO: Validators.py
+    data = request.form.to_dict()
+    metric_type, value = next(iter(data.items()))
+    start_utc, end_utc = today_range(current_user.timezone)
+    metric, was_created = repo.create_or_update_daily_metric(metric_type, value, start_utc, end_utc)
+    status = 201 if was_created else 200
+    return jsonify({
+        "success": True, 
+        "message": "Added metric",
+        "created": bool(was_created),
+        "metric_type": metric_type
+    }), status
diff --git a/app/modules/metrics/templates/metrics/dashboard.html b/app/modules/metrics/templates/metrics/dashboard.html
index 10b7274..8a9de79 100644
--- a/app/modules/metrics/templates/metrics/dashboard.html
+++ b/app/modules/metrics/templates/metrics/dashboard.html
@@ -5,27 +5,7 @@
 {% block content %}
-{% call ui.modal('/metrics/', 'metric-entry-dashboard', 'Add Metric') %}
-    <div class="tabs">
-        <button type="button" data-tab="steps" class="btn btn-secondary">Steps Entry</button>
-        <button type="button" data-tab="weight" class="btn btn-secondary">Weight Entry</button>
-    </div>
-    <div class="tab-content" id="tab-steps">
-        <div class="form-group">
-            <label for="steps">Steps:</label>
-            <input type="number" id="steps" name="steps">
-        </div>
-    </div>
-    <div class="tab-content" id="tab-weight" hidden>
-        <div class="form-group">
-            <label for="weight">Weight:</label>
-            <input type="number" id="weight" name="weight">
-        </div>
-    </div>
-{% endcall %}
+{{ ui.metric_entry_modal() }}
 <div class="charts-container">
     <div class="metric-graph card-dashboard">
@@ -39,45 +19,14 @@
         <h2 class="card-title">Daily Metric Entries</h2>
         <button id="metric-entry-dashboard-btn" class="btn btn-primary">Add Metric</button>
     </div>
-    <table class="table-standard">
-        <caption class="sr-only">Metric Entries</caption>
-        <thead class="table-header">
-            <tr>
-                {% if has_dev_tools %}
-                    <th>ID</th>
-                {% endif %}
-                {% for h in metric_headers %}
-                    <th>{{ h.label }}</th>
-                {% endfor %}
-            </tr>
-        </thead>
-        <tbody>
-            {% if metrics %}
-                {% for m in metrics %}
-                <tr class="table-row" data-item-id="{{ m.id }}" data-module="daily_metrics" data-subtype="metric">
-                    {% if has_dev_tools %}
-                        <td>{{ m.id }}</td>
-                    {% endif %}
-                    <td>{{ m.created_at_label }}</td>
-                    <td>{{ m.weight_label }}</td>
-                    <td>{{ m.steps }}</td>
-                    <td>{{ m.wake_time_label }}</td>
-                    <td>{{ m.sleep_time_label }}</td>
-                    <td>{{ m.calories_label }}</td>
-                    <td class="table-cell delete-cell">
-                        {{ ui.delete_btn() }}
-                    </td>
-                </tr>
-                {% endfor %}
-            {% else %}
-                <tr>
-                    <td colspan="999" class="table-empty">
-                        No metric entries yet.
-                    </td>
-                </tr>
-            {% endif %}
-        </tbody>
-    </table>
+    {% call(item, headers) ui.responsive_table('Daily Metric Entries', metric_headers, metrics, 'daily_metrics', 'metric') %}
+    <td class="{{ headers[0].priority}}">{{ item.created_at_label }}</td>
+    <td class="{{ headers[1].priority}}">{{ item.weight_label }}</td>
+    <td class="{{ headers[2].priority}}">{{ item.steps }}</td>
+    <td class="{{ headers[3].priority}}">{{ item.wake_time_label }}</td>
+    <td class="{{ headers[4].priority}}">{{ item.sleep_time_label }}</td>
+    <td class="{{ headers[5].priority}}">{{ item.calories_label }}</td>
+    {% endcall %}
 </section>
 {% endblock %}
diff --git a/app/modules/metrics/viewmodels.py b/app/modules/metrics/viewmodels.py
index 10f7ac8..7988d4a 100644
--- a/app/modules/metrics/viewmodels.py
+++ b/app/modules/metrics/viewmodels.py
@@ -1,28 +1,21 @@
-from app.shared.view_mixins import TimestampedViewMixin
+from app.shared.view_mixins import TimestampedViewMixin, BasePresenter
-class DailyMetricPresenter:
+class DailyMetricPresenter(BasePresenter):
     VISIBLE_COLUMNS = [
         "created_at", "weight", "steps", "wake_time", "sleep_time", "calories"
     ]
-    COLUMN_LABELS = {
-        "created_at": "Created",
-        "updated_at": "Last Updated",
-        "weight": "Weight",
-        "steps": "Steps",
-        "wake_time": "Wake Time",
-        "sleep_time": "Sleep Time",
-        "calories": "Calories"
+    COLUMN_CONFIG = {
+        "created_at": {"label": "Created", "priority": "desktop-only"},
+        "updated_at": {"label": "Last Updated", "priority": "desktop-only"},
+        "weight": {"label": "Weight", "priority": "essential"},
+        "steps": {"label": "Steps", "priority": "essential"},
+        "wake_time": {"label": "Wake Time", "priority": "essential"},
+        "sleep_time": {"label": "Sleep Time", "priority": "essential"},
+        "calories": {"label": "Calories", "priority": "essential"}
     }
-    @classmethod
-    def build_columns(cls) -> list[dict]:
-        """
-        Builds a list of column definitions for use as table headers.
-        Respects the order defined in `VISIBLE_COLUMNS` & excludes fields not explicitly whitelisted.
-        """
-        return [{"key": c, "label": cls.COLUMN_LABELS.get(c, c)} for c in cls.VISIBLE_COLUMNS]
 class DailyMetricViewModel(TimestampedViewMixin):
     def __init__(self, metric, tz):
diff --git a/app/modules/tasks/routes.py b/app/modules/tasks/routes.py
index 71157db..dc0b11e 100644
--- a/app/modules/tasks/routes.py
+++ b/app/modules/tasks/routes.py
@@ -1,11 +1,10 @@
-from flask import Blueprint, flash, jsonify, render_template, request
+from flask import Blueprint, jsonify, render_template, request
 from flask_login import current_user, login_required
-from app._infra.database import database_connection, with_db_session
-from app.modules.tasks.models import Task, Priority
+from app._infra.database import with_db_session
+from app.modules.tasks.models import Priority
 from app.modules.tasks.repository import TasksRepository
-from app.shared.sorting import bubble_sort
 from datetime import datetime, time
 from zoneinfo import ZoneInfo
 from app.modules.tasks.viewmodels import TaskViewModel, TaskPresenter
@@ -14,27 +13,21 @@ tasks_bp = Blueprint('tasks', __name__, template_folder="templates", url_prefix=
 @tasks_bp.route("/dashboard", methods=["GET"])
 @login_required
-def dashboard():
+@with_db_session
+def dashboard(session):
-    try:
-        with database_connection() as session:
+    tasks_repo = TasksRepository(session, current_user.id, current_user.timezone)
+    tasks = tasks_repo.get_all_tasks()
+    viewmodel = [TaskViewModel(t, current_user.timezone) for t in tasks]
-            # Fetch tasks, sort
-            tasks_repo = TasksRepository(session, current_user.id, current_user.timezone)
-            tasks = tasks_repo.get_all_tasks()
-            viewmodel = [TaskViewModel(t, current_user.timezone) for t in tasks]
+    ctx = {
+        "task_headers": TaskPresenter.build_columns(),
+        "tasks": viewmodel
+    }
+    return render_template("tasks/dashboard.html", **ctx)
-            ctx = {
-                "task_headers": TaskPresenter.build_columns(),
-                "tasks": viewmodel
-            }
-            return render_template("tasks/dashboard.html", **ctx)
-    except Exception as e:
-        return jsonify({"success": True, "message": str(e)}), 500
-# CREATE
 @tasks_bp.route("/", methods=["GET", "POST"])
 @login_required
 @with_db_session
diff --git a/app/modules/tasks/templates/tasks/dashboard.html b/app/modules/tasks/templates/tasks/dashboard.html
index 74f16f9..35b3237 100644
--- a/app/modules/tasks/templates/tasks/dashboard.html
+++ b/app/modules/tasks/templates/tasks/dashboard.html
@@ -30,46 +30,15 @@
         <h2 class="card-title">Tasks</h2>
         <button id="task-entry-dashboard-btn" class="btn btn-primary">Add Task</button>
     </div>
-    <table class="table-standard">
-        <caption class="sr-only">Tasks</caption>
-        <thead class="table-header">
-            <tr>
-                {% if has_dev_tools %}
-                    <th>ID</th>
-                {% endif %}
-                {% for h in task_headers %}
-                    <th>{{ h.label }}</th>
-                {% endfor %}
-            </tr>
-        </thead>
-        <tbody>
-            {% if tasks %}
-                {% for t in tasks %}
-                <tr class="table-row" data-item-id="{{ t.id }}" data-module="tasks" data-subtype="none">
-                    {% if has_dev_tools%}
-                        <td>{{ t.id }}</td>
-                    {% endif %}
-                    <td class="editable-cell tooltip" data-item-id="{{ t.id }}" data-module="tasks" data-field="name" data-tip="Double-click to edit field.">{{ t.name }}</td>
-                    <td>
-                        {# TODO: NOTES: |safe here to render HTML entities instead of escaping them #}
-                        {{ ('&#9745;' if t.is_done else '&#9744;') | safe }}
-                    </td>
-                    <td>{{ t.priority.value }}</td>
-                    <td class="text-right">{{ t.due_label }}</td>
-                    <td class="table-cell delete-cell">
-                        {{ ui.delete_btn() }}
-                    </td>
-                </tr>
-                {% endfor %}
-            {% else %}
-                <tr>
-                    <td colspan="999" class="table-empty">
-                        No tasks yet.
-                    </td>
-                </tr>
-            {% endif %}
-        </tbody>
-    </table>
+    {% call(item, headers) ui.responsive_table('Tasks', task_headers, tasks, 'tasks', 'none') %}
+        <td class="{{ headers[0].priority }} editable-cell tooltip" data-item-id="{{ item.id }}" data-module="tasks" data-field="name" data-tip="Double-click to edit field.">{{ item.name }}</td>
+        <td class="{{ headers[1].priority }}">
+            {# TODO: NOTES: |safe here to render HTML entities instead of escaping them #}
+            {{ ('&#9745;' if item.is_done else '&#9744;') | safe }}
+        </td>
+        <td class="{{ headers[2].priority }}">{{ item.priority.value }}</td>
+        <td class="{{ headers[3].priority }} text-right">{{ item.due_label }}</td>
+    {% endcall %}
 </div>
 {% endblock %}
diff --git a/app/modules/tasks/viewmodels.py b/app/modules/tasks/viewmodels.py
index edd34ae..5455f2d 100644
--- a/app/modules/tasks/viewmodels.py
+++ b/app/modules/tasks/viewmodels.py
@@ -1,32 +1,22 @@
-from app.shared.view_mixins import TimestampedViewMixin
+from app.shared.view_mixins import TimestampedViewMixin, BasePresenter
-class TaskPresenter:
+class TaskPresenter(BasePresenter):
     # View-specific table config
     VISIBLE_COLUMNS = [
         "name", "is_done", "priority", "due_date"
     ]
-    COLUMN_LABELS = {
-        "id": "Task ID",
-        "name": "Task",
-        "is_done": "Status",
-        "priority": "Priority",
-        "is_frog": "'Frog Task'?",
-        "due_date": "Due Date",
-        "created_at": "Created",
-        "completed_at": "Completed",
+    COLUMN_CONFIG = {
+        "id": {"label": "Task ID", "priority": "desktop-only"},
+        "name": {"label": "Task", "priority": "essential"},
+        "is_done": {"label": "Status", "priority": "essential"},
+        "priority": {"label": "Priority", "priority": "essential"},
+        "is_frog": {"label": "'Frog Task'?", "priority": "desktop-only"},
+        "due_date": {"label": "Due Date", "priority": "essential"},
+        "created_at": {"label": "Created", "priority": "desktop-only"},
+        "completed_at": {"label": "Completed", "priority": "desktop-only"}
     }
-    # TODO: NOTES: First arg is the class (cls) instead of the instance (self)
-    # Used when the method works with class-level data (metadata, config, alt constructors)
-    @classmethod
-    def build_columns(cls) -> list[dict]:
-        """
-        Builds a list of column definitions for use as table headers.
-        Respects the order defined in `VISIBLE_COLUMNS` & excludes fields not explicitly whitelisted.
-        """
-        return [{"key": c, "label": cls.COLUMN_LABELS.get(c, c)} for c in cls.VISIBLE_COLUMNS]
 class TaskViewModel(TimestampedViewMixin):
     def __init__(self, task, tz):
         self.id = task.id
diff --git a/app/modules/time_tracking/routes.py b/app/modules/time_tracking/routes.py
index 56e6c21..9f83727 100644
--- a/app/modules/time_tracking/routes.py
+++ b/app/modules/time_tracking/routes.py
@@ -27,29 +27,26 @@ def dashboard(session):
 @time_tracking_bp.route('/', methods=["GET", "POST"])
 @login_required
-def time_entries():
-    try:
-        if request.method == 'POST':
-            form_data =  request.form.to_dict() # convert formData to dict
-            started_at = resolve_start(form_data["started_at"], current_user.timezone)
-            form_data["started_at"] = started_at
-            form_data["ended_at"] = resolve_end(started_at, float(form_data["duration"]))
-            with database_connection() as session:
-                timetracking_repo = TimeTrackingRepository(session, current_user.id, current_user.timezone)
-                new_entry = timetracking_repo.create_time_entry(**form_data)
-                return jsonify({
-                    "success": True, 
-                    "message": "Time entry added.",
-                    "data": {
-                        "id": new_entry.id,
-                        "category": new_entry.category,
-                        "duration": new_entry.duration,
-                        "started_at": new_entry.started_at.isoformat(), # convert to string
-                        "description": new_entry.description
-                    }
-                }), 201
-    except Exception as e:
-        return jsonify({"success": False, "message": str(e)}), 500
+@with_db_session
+def time_entries(session):
+    if request.method == 'POST':
+        form_data =  request.form.to_dict() # convert formData to dict
+        started_at = resolve_start(form_data["started_at"], current_user.timezone)
+        form_data["started_at"] = started_at
+        form_data["ended_at"] = resolve_end(started_at, float(form_data["duration"]))
+        timetracking_repo = TimeTrackingRepository(session, current_user.id, current_user.timezone)
+        new_entry = timetracking_repo.create_time_entry(**form_data)
+        return jsonify({
+            "success": True, 
+            "message": "Time entry added.",
+            "data": {
+                "id": new_entry.id,
+                "category": new_entry.category,
+                "duration": new_entry.duration,
+                "started_at": new_entry.started_at.isoformat(),
+                "description": new_entry.description
+            }
+        }), 201
diff --git a/app/modules/time_tracking/templates/time_tracking/dashboard.html b/app/modules/time_tracking/templates/time_tracking/dashboard.html
index 9ff1d3b..41249fe 100644
--- a/app/modules/time_tracking/templates/time_tracking/dashboard.html
+++ b/app/modules/time_tracking/templates/time_tracking/dashboard.html
@@ -4,26 +4,7 @@
 {% block content %}
-{% call ui.modal('/time_tracking/', 'time-entry-dashboard', 'Add Time Entry') %}
-    {# Now our content from the modal_content block in the macro #}
-    <div class="form-group">
-        <label for="category">Category:</label>
-        <input type="text" id="category" name="category" required>
-    </div>
-    <div class="form-group">
-        <label for="duration">Duration (minutes):</label>
-        <input type="number" id="duration" name="duration" min="0" required>
-    </div>
-    <div class="form-group">
-        <label for="started_at">Started At:</label>
-        <input type="time" id="started_at" name="started_at" required>
-    </div>
-    <div class="form-group">
-        <label for="description">Description (Optional):</label>
-        <input type="text" id="description" name="description">
-    </div>
-{% endcall %}
+{{ ui.time_entry_modal() }}
 <div class="charts-container">
@@ -38,42 +19,11 @@
         <h2 class="card-title">Time Entries</h2>
         <button id="time-entry-dashboard-btn" class="btn btn-primary">Add Time Entry</button>
     </div>
-    <table class="table-standard">
-        <caption class="sr-only">Time Entries</caption>
-        <thead class="table-header">
-            <tr>
-                {% if has_dev_tools %}
-                    <th>ID</th>
-                {% endif %}
-                {% for h in time_entry_headers %}
-                    <th>{{ h.label }}</th>
-                {% endfor %}
-            </tr>
-        </thead>
-        <tbody>
-            {% if time_entries %}
-                {% for t in time_entries %}
-                <tr class="table-row" data-item-id="{{ t.id }}" data-module="time_tracking" data-subtype="timeentry">
-                    {% if has_dev_tools %}
-                        <td>{{ t.id }}</td>
-                    {% endif %}
-                    <td>{{ t.category }}</td>
-                    <td>{{ t.duration_label }}</td>
-                    <td>{{ t.started_at_local }}</td>
-                    <td>{{ t.desc_label }}</td>
-                    <td class="table-cell delete-cell">
-                        {{ ui.delete_btn() }}
-                    </td>
-                </tr>
-                {% endfor %}
-            {% else %}
-                <tr>
-                    <td colspan="999" class="table-empty">
-                        No entries yet.
-                    </td>
-                </tr>
-            {% endif %}
-        </tbody>
-    </table>
+    {% call(item, headers) ui.responsive_table('Time Entries', time_entry_headers, time_entries, 'time_tracking', 'timeentry') %}
+    <td class="{{ headers[0].priority }}">{{ item.category }}</td>
+    <td class="{{ headers[1].priority }}">{{ item.duration_label }}</td>
+    <td class="{{ headers[2].priority }}">{{ item.started_at_local }}</td>
+    <td class="{{ headers[3].priority }}">{{ item.desc_label }}</td>
+    {% endcall %}
 </section>
 {% endblock %}
\ No newline at end of file
diff --git a/app/modules/time_tracking/viewmodels.py b/app/modules/time_tracking/viewmodels.py
index 6b13ca4..7a0ef25 100644
--- a/app/modules/time_tracking/viewmodels.py
+++ b/app/modules/time_tracking/viewmodels.py
@@ -1,29 +1,21 @@
 """
 Presentation layer: Wraps models to provide display-friendly fields. Think: formatting, show in local timezone, etc.
 """
-from app.shared.view_mixins import TimestampedViewMixin
+from app.shared.view_mixins import TimestampedViewMixin, BasePresenter
-class TimeEntryPresenter:
+class TimeEntryPresenter(BasePresenter):
     VISIBLE_COLUMNS = [
         "category", "duration", "started_at", "description"
     ]
-    COLUMN_LABELS ={
-        "id": "ID",
-        "category": "Category",
-        "description": "Description",
-        "started_at": "Started At",
-        "duration": "Duration (mins.)"
+    COLUMN_CONFIG = {
+        "id": {"label": "ID", "priority": "desktop-only"},
+        "category": {"label": "Category", "priority": "essential"},
+        "description": {"label": "Description", "priority": "essential"},
+        "started_at": {"label": "Started At", "priority": "essential"},
+        "duration": {"label": "Duration (mins.)", "priority": "essential"}
     }
-    @classmethod
-    def build_columns(cls) -> list[dict]:
-        """
-        Builds a list of column definitions for use as table headers.
-        Respects the order defined in `VISIBLE_COLUMNS` & excludes fields not explicitly whitelisted.
-        """
-        return [{"key": c, "label": cls.COLUMN_LABELS.get(c, c)} for c in cls.VISIBLE_COLUMNS]
 class TimeEntryViewModel(TimestampedViewMixin):
     def __init__(self, entry, tz):
diff --git a/app/shared/datetime/helpers.py b/app/shared/datetime/helpers.py
index ba031f8..2504b49 100644
--- a/app/shared/datetime/helpers.py
+++ b/app/shared/datetime/helpers.py
@@ -15,7 +15,7 @@ def parse_js_instant(iso_str: str) -> datetime:
 def now_utc() -> datetime:
     return datetime.now(timezone.utc)
-def datetime_local(tz_str: str = 'UTC', dt: datetime | None = None) -> datetime:
+def convert_to_timezone(tz_str: str = 'UTC', dt: datetime | None = None) -> datetime:
     """
     Return a timezone-aware datetime in the given timezone.
@@ -33,8 +33,6 @@ def datetime_local(tz_str: str = 'UTC', dt: datetime | None = None) -> datetime:
     else:
         return datetime.now(tz)  # or return 'now' if none provided
 def start_of_day_utc(dt: datetime, tz: str = "UTC") -> datetime:
     """Get start of day in UTC for a given datetime in given timezone."""
     zone = ZoneInfo(tz)
@@ -46,9 +44,16 @@ def today_range(tz_str: str = "UTC") -> tuple[datetime, datetime]:
     Return (start_of_day_utc, end_of_day_utc) for today in given timezone.
     Helpful for our "Did it happen today?" queries.
     """
-    now = datetime_local(tz_str)
-    start_utc = start_of_day_utc(now, tz_str)
-    end_utc = (start_utc + timedelta(days=1))
+    # Get current time in user's time
+    tz = ZoneInfo(tz_str)
+    now_local = datetime.now(tz)
+    # Calculate start of today in user's timezone, convert to UTC
+    start_local = datetime.combine(now_local.date(), time.min, tzinfo=tz)
+    start_utc = start_local.astimezone(timezone.utc)
+    # End is start of tomorrow
+    end_utc = start_utc + timedelta(days=1)
     return start_utc, end_utc
 def day_range(date: datetime.date, tz_str: str = "UTC") -> tuple[datetime, datetime]:
diff --git a/app/shared/middleware.py b/app/shared/middleware.py
index e69de29..51ecf15 100644
--- a/app/shared/middleware.py
+++ b/app/shared/middleware.py
@@ -0,0 +1,4 @@
+from flask import session
+def set_toast(message, type = "info"):
+    session['toast'] = {"message": message, "type": type}
\ No newline at end of file
diff --git a/app/shared/sorting.py b/app/shared/sorting.py
index f09fed6..75870ac 100644
--- a/app/shared/sorting.py
+++ b/app/shared/sorting.py
@@ -51,7 +51,7 @@ def bubble_sort_simple(myList):
                 temp = myList[j]
                 myList[j] = myList[j+1]
                 myList[j+1] = temp
-        if no_swaps == True:
+        if no_swaps:
             break
 # Stable
@@ -82,7 +82,7 @@ def bubble_sort(myList: List[Any], key: str, reverse: bool = False) -> None:
                 myList[j] = myList[j+1]
                 myList[j+1] = temp
         # If we traverse the entire array once without swapping, we have fully sorted the list
-        if no_swaps == True:
+        if no_swaps:
             break
 # Slightly more efficient than bubble sort
diff --git a/app/shared/view_mixins.py b/app/shared/view_mixins.py
index ceeed8b..b4b96ad 100644
--- a/app/shared/view_mixins.py
+++ b/app/shared/view_mixins.py
@@ -6,4 +6,20 @@ class TimestampedViewMixin:
     def format(self, dt, tz, fmt="%Y-%m-%d %H:%M"):
         local = self._to_local(dt, tz)
-        return local.strftime(fmt) if local else ""
\ No newline at end of file
+        return local.strftime(fmt) if local else ""
+class BasePresenter:
+    @classmethod
+    def build_columns(cls) -> list[dict]:
+        """
+        Builds a list of column definitions for use as table headers.
+        Respects the order defined in `VISIBLE_COLUMNS` & excludes fields not explicitly whitelisted.
+        """
+        return [
+            {
+                "key": col, 
+                "label": cls.COLUMN_CONFIG[col]["label"],
+                "priority": cls.COLUMN_CONFIG[col]["priority"]
+            }
+            for col in cls.VISIBLE_COLUMNS]
\ No newline at end of file
diff --git a/app/static_src/css/app.css b/app/static_src/css/app.css
index db6c96b..5ad07d8 100644
--- a/app/static_src/css/app.css
+++ b/app/static_src/css/app.css
@@ -1,17 +1,28 @@
 /* Single entry file, declares layer order + imports
  * Defines cascade precedence: lowest = highest priority
  */
-@layer base, components, utilities, app;
+@layer base, components, utilities, animations, app;
 /* Design tokens live OUTSIDE layers so everything can read vars */
 @import './tokens.css';
 @import url('./base.css') layer(base);
 @import url('./components.css') layer(components);
 @import url('./utilities.css') layer(utilities);
+@import url('./animations.css') layer(animations);
 /* Breakpoints:
  * width <= 640px   Mobile nav toggle, chart stacking
  * width > 640px    Hide mobile navlinks?
+ * width <= 768px   Hide 'desktop-only' classed table columns
+*/
+/* Thoughts on z-index standardization (as insurance)
+ * 0-99    - Base layout elements
+ * 100-199 - Tooltips, dropdowns
+ * 200-299 - Context menus, popovers, navbar, sticky side panels
+ * 300-399 - Modals, backdrop overlays
+ * 400-499 - Toasts, system-level UI (spinners?)
+ * 500+    - Debug layer, devtools, etc.
 */
 :root {
@@ -32,7 +43,7 @@
 .content {
     flex: 1; /* makes flex container's child grow & take up all remaining space */
     width: 100%;
-    max-width: clamp(48rem, 90vw, 90rem);
+    max-width: clamp(100%, 90vw, 90rem);
     margin: auto;
     display: flex;
     flex-direction: column;
@@ -100,12 +111,10 @@
     min-height: 120px;
     align-items: stretch; /* makes all children same height */
 }
-/* Makes DailyCheckin card consist of grid layout with two columns */
-/* #daily-check-in-card {
-    display: grid;
-    grid-template-columns: 1fr 1fr;
-    gap: var(--gap-lg);
-} */
+#sky-canvas {
+    width: 100%;
+    height: clamp(150px, 15vh, 300px);
+}
 #daily-habits-card {
     display: grid;
     grid-template-columns: 1fr 1fr;
@@ -160,14 +169,20 @@ h3 {
 /* Form & Input Validation Styling (user-valid/invalid is a relatively new feature? Check browser support) */
-form input:not([type="checkbox"]):user-valid {
+form input:not([type="checkbox"]):not([type="radio"]):user-valid {
     outline: 2px solid;
     outline-color: var(--color-success);
 }
-form input:not([type="checkbox"]):user-invalid {
+form input:not([type="checkbox"]):not([type="radio"]):user-invalid {
     outline: 2px solid;
     outline-color: var(--color-error);
 }
+.radio-row {
+    display: flex;
+    flex-direction: row;
+    gap: var(--gap-sm);
+}
 /* TODO: 
  * FINISH: Tune styling 
@@ -224,23 +239,6 @@ dialog::backdrop {
     top: -0.4rem;
 }
-/* ==== NAVIGATION ==== */
-#hamburger-btn {
-    color: var(--text);
-    min-width: 40px;
-    min-height: 40px;
-}
-/* Base navlinks styling (desktop-first) */
-.navlinks {
-    display: flex;
-    gap: var(--gap-lg);
-}
-nav {
-    min-height: var(--min-navbar-height);
-    background-color: var(--accent-strong);
-    padding: 1rem;
-    position: relative; /* creates positioning context for flash-message */
-}
 /* Dashboard checkbox completion effect */
 .habit-list {
@@ -262,16 +260,72 @@ nav {
     color: var(--text-muted);
 }
+/* ==== NAVIGATION ==== */
+#hamburger-btn {
+    color: var(--text);
+    min-width: 40px;
+    min-height: 40px;
+}
+/* Base navlinks styling (desktop-first) */
+.navlinks {
+    display: flex;
+    gap: var(--gap-lg);
+}
+nav {
+    min-height: var(--min-navbar-height);
+    background-color: var(--accent-strong);
+    padding: 1rem;
+    position: relative; /* forces nav to participate in stacking context so z-index actually applies */
+    z-index: 250; /* to be above mobilenav */
+}
+.nav-anchor {
+    position: relative;
+}
+/* Container: visibility, positioning, stacking */
+.mobilenav {
+    /* display: none; */
+    position: absolute;
+    top: 100%;
+    left: 0; right: 0;
+    z-index: 201;
+    background-color: var(--accent-strong);
+    opacity: 0;
+    pointer-events: none;
+    transform: translateY(-300px) scaleY(0.95); /* "out of place" & squished to start, so transition can apply to something */
+    transform-origin: top center;
+    transition: 
+        transform 0.35s cubic-bezier(0.25, 0.8, 0.25, 1);
+}
+.mobilenav.is-open {
+    display: flex;
+    flex-direction: column;
+    gap: var(--gap-lg);
+    opacity: 1;
+    pointer-events: auto;
+    transform: translateY(0) scaleY(1); /* drops in & stretches to full */
+}
+/* Content: layout of links themselves */
+.mobilenavlist {
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    width: 100%; /* stretch column */
+    gap: var(--gap-lg);
+}
+.mobilenavlist a {
+    display: block; /* each line fills parent's width */
+    width: 100%;
+    text-align: center; /* center text inside */
+    padding: 0.75rem 1rem; /* for easier touch targets */
+}
 /* ==== MEDIA QUERIES ==== */
 @media (width <= 640px) {
     .navlinks {
         display: none;
-        flex-direction: column;
-        row-gap: var(--gap-lg);
     }
-    .navlinks.is-open { display: flex; }
+    /* .navlinks.is-open { display: flex; } */
     .charts-container, #daily-check-in-card {
         grid-template-columns: 1fr; /* stack charts + metric-row divs for smaller widths */
     }
@@ -280,6 +334,15 @@ nav {
     #hamburger-btn { display: none; }
 }
+/* Viewmodels' COLUMN_CONFIGs dictate which table columns per table are 'essential' or 'desktop-only'
+ * Let's us easily "condense" our tables to provide a better mobile experience
+*/
+@media (width <= 768px) {
+    .desktop-only {
+        display: none;
+    }
+}
 /* TODO: Tune this later as we add some basic animations/transitions */
 @media (prefers-reduced-motion: reduce) {
     .navlinks { transition: none; }
diff --git a/app/static_src/css/components.css b/app/static_src/css/components.css
index 6e61d22..edc75a6 100644
--- a/app/static_src/css/components.css
+++ b/app/static_src/css/components.css
@@ -194,7 +194,7 @@
     border-radius: var(--border-radius);
     position: fixed;  /* important since it takes it out of the DOM flow? */
     max-width: 50%;
-    z-index: 1000;
+    z-index: 200;
 }
 .context-menu > li {
     padding: 0.5rem 1rem;
@@ -245,18 +245,24 @@
     gap: var(--gap-sm);
     top: calc(1.3 * var(--min-navbar-height));
     right: 1rem;
-    border: 2px solid red;
+    /* border: 2px solid red; */
+    z-index: 400;
+    border-radius: var(--border-radius-mild);
+}
+.toast {
+    border-radius: var(--border-radius-mild);
+    border: solid 1px transparent;
+    padding: var(--gap-xs) var(--gap-sm);
 }
-/* .toast {
-    margin-bottom: var(--gap-sm);
-} */
 .toast-success {
     background-color: color-mix(in srgb, var(--color-success) 10%, white); /* Derive from bg-success */
     color: var(--color-success);
+    border-color: var(--color-success);
 }
 .toast-error {
     background-color: color-mix(in srgb, var(--color-error) 10%, white);
     color: var(--color-error);
+    border-color: var(--color-error);
 }
 /* Warnings? Messages? Success? idk */
@@ -266,7 +272,7 @@
     left: 0;
     width: 100%; /* match navbar width */
     height: var(--min-navbar-height);
-    z-index: 99; /* appear above other content */
+    z-index: 401; /* appear above other content */
     background-color: color-mix(in srgb, var(--color-success) 10%, white); /* Derive bg-color from our color-success var instead of hardcoding */
     color: var(--color-success);
     padding: 0.5rem 1rem;
diff --git a/app/static_src/css/tokens.css b/app/static_src/css/tokens.css
index 684d5ef..098a9e3 100644
--- a/app/static_src/css/tokens.css
+++ b/app/static_src/css/tokens.css
@@ -24,7 +24,9 @@
     --container-xl: 80rem;
     --border-radius: 0.5rem;
+    --border-radius-mild: 0.3rem;
     --border-radius-top: 0.5rem 0.5rem 0 0;
+    --gap-xs: 0.25rem;
     --gap-sm: 0.5rem;
     --gap-md: 1rem;
     --gap-lg: 1.5rem;
@@ -61,17 +63,19 @@
     /* =============== DARK THEME DEFINITIONS =============== */
     /* Background Hierarchy */
-    --dark-bg-dark: oklch(11.492% 0.00001 271.152);
-    --dark-bg: oklch(0.18 0 0);
-    --dark-bg-light: hsl(0 0% 10%);
+    --dark-bg-dark: oklch(0.22 0 0);
+    --dark-bg: oklch(0.26 0 0);
+    --dark-bg-light: oklch(0.33 0 0);
     /* Text Hierarchy */
-    --dark-text: hsl(0 0% 95%);
-    --dark-text-muted: hsl(0 0% 70%);
+    --dark-text: oklch(0.98 0 0);
+    /* --dark-text: hsla(0, 0%, 95%, 0.927); */
+    --dark-text-muted: oklch(0.8 0 0);
+    /* --dark-text-muted: hsl(0 0% 70%); */
     --dark-text-destructive: hsl(0, 84%, 60%);
     /* Borders */
-    --dark-border-color: hsl(0 0% 30%);
+    --dark-border-color: oklch(0.45 0 0);
     /* Accent Colors */
     --dark-accent-strong: oklch(40% 0.12 250);
diff --git a/app/static_src/js/app.js b/app/static_src/js/app.js
index 8759cfe..6c58b3e 100644
--- a/app/static_src/js/app.js
+++ b/app/static_src/js/app.js
@@ -1,41 +1,5 @@
-// Attempting to grab user info (namely for timezone for now) in a maintainable way
-import { userStore } from './shared/userStore.js';
+// Entrypoint for esbuild
-// Entry point for shared JS
-import './shared/navbar.js';
-import './shared/tables.js';
-import './shared/theme-manager.js';
-import './shared/toast.js';
-import './shared/tooltip.js';
+import { initMain } from './main.js';
-// Import page-specific modules
-import { init as initCore } from './core/index.js';
-import { init as initGroceries } from './groceries/dashboard.js';
-import { init as initHabits } from './habits/dashboard.js';
-import { init as initTasks } from './tasks/dashboard.js';
-// Init user data upon app load
-async function initApp() {
-    try {
-        await userStore.fetch();
-        console.log('User timezone loaded:', userStore.data.timezone);
-    } catch (error) {
-        console.warn('Error loading user timezone: ', error);
-        // Fall back to browser timezone
-    }
-    // Initialize all page modules (which in turn self-determine if they should init)
-    // TODO: NOTES: Study, also look into dependency orchestration (init order matters?)
-    initCore();
-    initGroceries();
-    initHabits(); 
-    initTasks();
-}
-// Start the app (runs when we load <script> in base.html)
-// 1. Page loads
-// 2. app.js executes
-// 3. initApp() runs
-// 4. userStore.fetch() gets timezone for user
-initApp();
\ No newline at end of file
+initMain();
\ No newline at end of file
diff --git a/app/static_src/js/core/index.js b/app/static_src/js/core/index.js
index 1be435f..660b447 100644
--- a/app/static_src/js/core/index.js
+++ b/app/static_src/js/core/index.js
@@ -1,111 +1,16 @@
-import { formatDateString } from '../shared/datetime.js';
+import { formatTimeString } from '../shared/datetime.js';
 import { getJSInstant } from '../shared/datetime.js';
-import { userStore } from '../shared/userStore.js';
+import { fetchWeatherData } from '../shared/services/weather-service.js';
+import { calcCelestialBodyPos, CelestialRenderer, setupCanvas } from '../shared/canvas.js';
+import { makeToast } from '../shared/ui/toast.js';
 // Global caches
 let weatherInfo = null;  // for weatherInfo
-let cachedSunPos = null; // for sunPos (for redrawing after Canvas resizing)
-/**
- * Function for inputting time entries via our activity log card inputs
- * @param {HTMLElement} element - The "Save Entry" button in our activity log card
- */
-async function saveTimeEntry(element) {
-    // Grabbing our elements from there
-    const card = element.closest('#activity-log-card');
-    const categoryElement = card.querySelector('[name="category"]');
-    const durationElement = card.querySelector('[name="duration"]');
-    const descriptionElement = card.querySelector('[name="description"]');
-    // Getting values for POST
-    const category = categoryElement.value;
-    const duration = durationElement.value;
-    const description = descriptionElement.value;
-    try {
-        // Now our async fetch
-        const response = await fetch('/time_tracking/', {
-            method: 'POST',
-            headers: {
-                'Content-Type': 'application/json'
-            },
-            body: JSON.stringify({
-                category: category,
-                duration: duration,
-                description: description
-            })
-        });
-        const responseData = await response.json();
-        if (responseData.success) {
-            // Clear our inputs
-            categoryElement.value = '';
-            durationElement.value = '';
-            descriptionElement.value = '';
-        } else {
-            console.error('Error saving entry: ', responseData.message);
-        }
-    }
-    catch (error) {
-        console.error('Failed to save/update: ', error);
-    }
-}
-function editIntention(span) {
-    inlineEditElement(span, {
-        onSave: (val, el) => updateIntention(el, val)
-    });
-}
-// TODO: Scrap + merge into generalized inline edit function
-async function updateIntention(element, newValue) {
-    try {
-        const response = await fetch('/daily-intentions/', {
-            method: 'POST',
-            headers: { 'Content-Type': 'application/json' },
-            body: JSON.stringify({ intention: newValue })
-        });
-        const responseData = await response.json();
-        if (responseData.success) {
-            element.innerHTML = `${newValue}`; // replace input field with just newValue text upon success
-        } else {
-            console.error('Error saving intention:', responseData.message);
-        }
-    } catch (error) {
-        console.error('Failed to save/update:', error);
-    }
-}
-// TODO: Scrap?
-/**
- * Saves input data based on input's data attributes (metric or checkin)
- * @param {HTMLElement} input - Input element containing data to save
- * @description
- * - Only saves if input has a value (allows partial form completion)
- */
-async function saveData(input) {
-    // Don't bother sending for empty input fields (don't require all to be filled out)
-    if (input.dataset.metric && input.value) {
-        // call metric logic
-        const response = await fetch('/metrics', {
-            method: 'POST',
-            headers: { 'Content-Type': 'application/json'},
-            body: JSON.stringify({
-                metric_type: input.dataset.metric,
-                value: input.value,
-            })
-        });
-        const responseData = await response.json();
-        if (responseData.success) {
-            alert('Saved!');
-        }
-    } else if (input.dataset.checkin) {
-        // TODO: call checkin logic
-    }
-}
+// let cachedSunPos = null; // for sunPos
+// let currentBodyType = 'moon';
+let currentCanvasState = null;
+let resizeTimeout = null;
+let renderer;
 /**
  * Marks a habit as complete/incomplete & updates the UI accordingly.
@@ -115,11 +20,6 @@ async function saveData(input) {
  * @returns {Promise<void>} 
  */
 async function markHabitComplete(checkbox, habitId) {
-    // Fetch sends a request to flask server
-    // POSTing to a dynamic URL like /complete_habit/7 => Translation: "Hey, mark habit 7 as complete"
-    // If .checked == True  -> user just checked it
-    // If .checked == False -> user just un-checked it
     try {
         // Mark complete => POST HabitCompletion
         // Get instant user clicks "done"
@@ -146,240 +46,138 @@ async function markHabitComplete(checkbox, habitId) {
             } else {
                 console.error('Error marking habit complete:', responseData.message);
             }
-            // TODO: CLEAN NOTES
-        // Mark un-complete => DELETE HabitCompletion from today
         } else {
-            // Note: Built this to accept any date via query parameter (the "?=.." thing) for future flexibility
+            // TODO: NOTES: Built this to accept any date via query parameter (the "?=.." thing) for future flexibility
             // but currently we only ever delete today's completion from our main dashboard
             // So the route CAN handle any date, but our JS will stick to today
-            const todayDateOnly = new Date().toISOString().split('T')[0]; // Gives format like "2025-06-26"
-            const response = await fetch(`/habits/${habitId}/completions?date=${todayDateOnly}`, {
+            //const todayDateOnly = new Date().toISOString().split('T')[0]; // Gives format like "2025-06-26"
+            const todayDateOnly = new Intl.DateTimeFormat('en-CA').format(new Date());
+            const response = await fetch(`/habits/${habitId}/completion?date=${todayDateOnly}`, {
                 method: 'DELETE',
                 headers: { 'Content-Type': 'application/json' },
             });
             const responseData = await response.json(); // Wait for JSON parsing
-            // DO something with our response data
-            // Runs AFTER fetch + JSON parsing - not in a nested callback anymore
             if (responseData.success) {
                 // un-apply effect/styling (update DOM)
-                const textSpan = checkbox.nextElementSibling; // Grabs span right after checkbox element
-                if (textSpan) {
-                    textSpan.classList.remove('line-through', 'text-gray-400');
+                const row = checkbox.closest('.habit-row');
+                const emojiSpan = row.querySelector('.habit-streak');
+                const listItem = row.closest('.habit-item');
+                let streakCount = parseInt(emojiSpan.dataset.streakCount, 10);
+                streakCount -= 1;
+                emojiSpan.dataset.streakCount = streakCount;
+                listItem?.classList.toggle('completed');
+                if (streakCount > 0) {
+                    emojiSpan.textContent = `🔥${streakCount}`;
+                } else {
+                    emojiSpan.textContent = "";
                 }
             } else {
                 console.error('Error un-marking habit complete:', responseData.message);
             }
         }
     } catch (error) {
-        // Network/fetch errors for either case
-        // With .then, we'd need .catch() at the end of each promise chain
         console.error('Error during habit completion request:', error);
     }
 }
-// Update time display in real-time
-function getCurrentTimeString() {
-    let date = new Date(); // First we need to get today's date obj
-    let hours = date.getHours();
-    let minutes = date.getMinutes();
-    // Pad times & stitch together
-    // TODO: Helper!!
-    let paddedHours = hours.toString().padStart(2, '0');
-    let paddedMinutes = minutes.toString().padStart(2, '0');
-    let timeString = `${paddedHours}:${paddedMinutes}`;
-    return timeString;
-}
 function updateClock() {
-    let timeDisplay = document.querySelector('#time-display');
-    timeDisplay.textContent = getCurrentTimeString(); // use getCurrentTimeString to call that & inject that value
+    const timeDisplay = document.querySelector('#time-display');
+    timeDisplay.textContent = formatTimeString();
 }
 // Get weather info via API, orchestrates our sun movement
+// TODO: Un-hardcode city + units (get from userStore in fetchWeatherData itself?)
 async function getWeatherInfo() {
     const tempDisplay = document.querySelector('#weather-temp');
     const sunsetDisplay = document.querySelector('#weather-sunset');
     const city = "London";
     const units = "metric";
-    try {
-        tempDisplay.textContent = "Loading weather info...";
-        const response = await fetch(`/api/weather/${city}/${units}`) // TODO: NOTES: GET is default method for fetch
-        if (!response.ok) {
-            throw new Error(`Weather API failed: ${response.status}`);
-        }
-        weatherInfo = await response.json();
-        // Extract desired vals from weatherInfo data
-        const temp = Math.round(weatherInfo.main.temp);
-        const sunset = weatherInfo.sys.sunset;
-        const desc = weatherInfo.weather[0].description.toLowerCase();
-        const weatherConditions = {
-            thunder: '⛈️',
-            drizzle: '🌦️',
-            rain: '🌧️',
-            overcast: '☁️',
-            snow: '❄️',
-            mist: '🌫️',
-            fog: '🌫️',
-            clear: '☀️',
-            "few clouds": '🌤️',
-            scattered: '⛅',
-            broken: '⛅',
-            tornado: '🌪️'
-        }
-        // Find first weather condition key matching desc, return its emoji or undefined
-        // Terms: variable declaration that stores the result of a complex expression
-        const emoji = Object.entries(weatherConditions).find(
-            ([key]) => desc.includes(key)
-        )?.[1] ?? '🌡️'; // "?? '🌡️'" <= Nullish coalescing: fallback if nothing found
-        // Convert sunset time to date & local
-        // TODO: use new datetime helpers!!
-        const sunsetTime = new Date(sunset * 1000); // comes in Unix-style, so convert first
-        const sunsetFormatted = sunsetTime.toLocaleTimeString([], {
-            hour: '2-digit',
-            minute: '2-digit'
-        });
-        // Display temp with units & formatted sunset time
-        tempDisplay.textContent = `${temp}°${units === 'metric' ? 'C' : 'F'} ${emoji}`;
-        sunsetDisplay.textContent = `Sunset: ${sunsetFormatted} 🌅`;
+    tempDisplay.textContent = "Loading weather info...";
+    weatherInfo = await fetchWeatherData();
-    } catch (error) {
-        console.error('Weather fetch failed:', error);
-        tempDisplay.textContent = "Weather unavailable";
-        sunsetDisplay.textContent = "Sunset: --:--";
-    }
+    // Display temp with units & formatted sunset time
+    // Destructure what we need
+    const { temp, emoji, sunsetFormatted } = weatherInfo;
+    tempDisplay.textContent = `${temp}°${units === 'metric' ? 'C' : 'F'} ${emoji}`;
+    sunsetDisplay.textContent = `Sunset: ${sunsetFormatted} 🌅`;
 }
-function updateSunPosition() {
-    if (weatherInfo) {
-        const now = Math.floor(Date.now() / 1000); // convert to seconds to compare to what API gave
-        cachedSunPos = calcSunPosition(weatherInfo.sys.sunrise, weatherInfo.sys.sunset, now);
-        drawSun(cachedSunPos.x, cachedSunPos.y);
+function updateCelestialBodyPos() {
+    if (!weatherInfo) return;
+    const now = Math.floor(Date.now() / 1000); // convert to seconds to compare to what API gave
+    const { sunrise, sunset } = weatherInfo;
+    let position;
+    let bodyType = 'moon';
+    if (now >= sunrise && now <= sunset) {
+        // Daytime
+        bodyType = 'sun';
+        position = calcCelestialBodyPos(sunrise, sunset, now);
+    } else if (now > sunset) {
+        // Tonight (after sunset)
+        const nextSunrise = sunrise + (24 * 60 * 60);
+        position = calcCelestialBodyPos(sunset, nextSunrise, now); // Just flip to find progress between sunset and tomorrow's sunrise, close enough for a widget!
+    } else {
+        // Last night (before sunrise)
+        const prevSunset = sunset - (24 * 60 * 60);
+        position = calcCelestialBodyPos(prevSunset, sunrise, now);
     }
-}
-// Handle calculation only of new sun position in arc
-/**
- * Calculates normalized sun position along arc for the current time
- * @param {number} sunrise - Sunrise time in ms (Unix)
- * @param {number} sunset - Sunset time in ms (Unix)
- * @param {number} now - Current time in ms (Unix)
- * @returns {{x: number, y: number}} Normalized coordinates (0-1) for sun position
- * @description
- * - X represents progress through the day (0 = sunrise, 1 = sunset)
- * - Y uses sine curve to create natural arc (0 at horizon, peak at noon)
- * - Want to extend for moon calculation using night hours later
- */
-function calcSunPosition(sunrise, sunset, now) {
-    // Calculate horizontal progress through daylight hours (0-1)
-    const xVal = (now - sunrise) / (sunset - sunrise);
-    // Create arc using sine curve
-    const yVal = Math.sin(xVal * Math.PI);
-    /** Notes for adding our moon too:
-     *  Calc becomes: (now - todaySunset) / (tomorrowSunrise - todaySunset)
-     *  Conditionally re-use functions:
-     *  if (now < tomorrowSunrise) -> calc/draw moon
-     *  else                       -> calc draw sun
-     *  Add moon phases later
-     */
-    // Debug: console.log(`Current time: ${now} | Sunrise: ${sunrise} | Sunset: ${sunset} | Progress thru day: ${(now-sunrise)/(sunset-sunrise)}`);
-    return { x: xVal, y: yVal }
-}
+    currentCanvasState = {
+        bodyType: bodyType,
+        x: position.x,
+        y: position.y
+    };
-// Sun drawing constants
-const SUN_CONFIG = {
-    RADIUS: 10,
-    RAY_COUNT: 8,
-    RAY_LENGTH: 15,
-    RAY_OFFSET: 5, // gap between sun & its rays
-    COLOR: 'orange'
-};
+    redrawCanvas();
+}
 /**
- * Draws a sun with rays at normalized coordinates (0-1 range)
- * @param {number} x - Normalized x position (0=sunset, 1=sunset)
- * @param {number} y - Normalized y position (sine arc)
+ * Trigger canvas redraw upon resizing
  */
-function drawSun(x, y) {
-    const canvas = document.querySelector('#sun-canvas');
-    const ctx = canvas.getContext('2d');
-    // Convert normalized coordinates to canvas pixels
-    const canvasX = x * canvas.width;
-    const canvasY = y * canvas.height;
-    // Set up coordinate system with bottom-left origin
-    ctx.clearRect(0, 0, canvas.width, canvas.height);
-    ctx.save();
-    ctx.scale(1, -1);
-    ctx.translate(0, -canvas.height);
-    // Draw main sun body
-    ctx.fillStyle = SUN_CONFIG.COLOR;
-    ctx.beginPath();
-    ctx.arc(canvasX, canvasY, SUN_CONFIG.RADIUS, 0, 2 * Math.PI);
-    ctx.fill();
-    // Draw sun rays
-    ctx.strokeStyle = SUN_CONFIG.COLOR;
-    for (let i = 0; i < SUN_CONFIG.RAY_COUNT; i++) {
-        const angle = (i * 2 * Math.PI) / SUN_CONFIG.RAY_COUNT;
-        const startX = canvasX + (SUN_CONFIG.RADIUS + 5) * Math.cos(angle);
-        const startY = canvasY + (SUN_CONFIG.RADIUS + 5) * Math.sin(angle);
-        const endX = canvasX + (SUN_CONFIG.RADIUS + SUN_CONFIG.RAY_LENGTH) * Math.cos(angle);
-        const endY = canvasY + (SUN_CONFIG.RADIUS + SUN_CONFIG.RAY_LENGTH) * Math.sin(angle);
-        ctx.beginPath();
-        ctx.moveTo(startX, startY);
-        ctx.lineTo(endX, endY);
-        ctx.stroke();
+function redrawCanvas() {
+    setupCanvas();
+    if (currentCanvasState) {
+        //drawCelestialBody(currentCanvasState.x, currentCanvasState.y, currentCanvasState.bodyType);
+        renderer.draw(
+            currentCanvasState.x, 
+            currentCanvasState.y, 
+            currentCanvasState.bodyType
+        );
     }
-    ctx.restore(); // reset canvas to point of .save()
 }
 export function init() {
-    // Guard
     const hasWeatherSection = document.querySelector('.weather-section');
-    const hasTimeEntry = document.querySelector('#time-entry-modal');
     const hasHabits = document.querySelector('.habit-checkbox');
-    if (!hasWeatherSection && !hasTimeEntry && !hasHabits) return;
+    if (!hasWeatherSection && !hasHabits) return;
-    // Event listeners for page
     document.addEventListener('change', (e) => {
         if (e.target.matches('.habit-checkbox')) {
-            // Pass checkbox element, data-habit-id value
             markHabitComplete(e.target, e.target.dataset.habitId);
         }
-        // Handles saving of Daily Check-In inputs (only weight, steps, & movement so far though)
-        else if (e.target.matches('input[data-metric]')) {
-            saveData(e.target);
-        }
     });
     // Weather setup
     if (hasWeatherSection) {
-        getWeatherInfo();    // Cache weather data
-        updateSunPosition(); // Draw sun immediately
+        renderer = new CelestialRenderer('#sky-canvas');
+        getWeatherInfo();         // Cache weather data
+        updateCelestialBodyPos(); // Draw sun immediately
         setInterval(getWeatherInfo, 1*60*60*1000);  // Update weather every hour
-        setInterval(updateSunPosition, 10*60*1000); // Update sun from weatherInfo every 10 mins => 10*60*1000
+        setInterval(updateCelestialBodyPos, 6000); // Update sun from weatherInfo every 10 mins => 10*60*1000
+        window.addEventListener('resize', () => {
+            clearTimeout(resizeTimeout);
+            resizeTimeout = setTimeout(redrawCanvas, 100); // debounce redraw
+        });
     }
     // Clock setup
     if (document.querySelector('#time-display')) {
         setInterval(updateClock, 30 * 1000);
         updateClock();
     }
-}
-export { calcSunPosition };
\ No newline at end of file
+}
\ No newline at end of file
diff --git a/app/static_src/js/metrics/dashboard.js b/app/static_src/js/metrics/dashboard.js
index 99247da..74c4245 100644
--- a/app/static_src/js/metrics/dashboard.js
+++ b/app/static_src/js/metrics/dashboard.js
@@ -2,19 +2,4 @@
 export function init() {
     if (!document.querySelector('#metrics-dashboard-table')) return;
-    document.querySelectorAll('.tabs button').forEach(btn => {
-        btn.addEventListener('click', () => {
-            console.log(`Button ${btn.dataset.tab} clicked`);
-            // hide all panels & remove active
-            document.querySelectorAll('.tabs button').forEach(b => b.classList.remove('active'));
-            document.querySelectorAll('.tab-content').forEach(p => p.hidden = true);
-            // show selected
-            const cls = 'tab-' + btn.dataset.tab;
-            const panel = document.querySelector(`#${cls}`);
-            if (panel) {
-                btn.classList.add('active');
-                panel.hidden = false
-            };
-        });
-    });
 }
diff --git a/app/static_src/js/shared/datetime.ts b/app/static_src/js/shared/datetime.ts
index 78278d8..6b62e8c 100644
--- a/app/static_src/js/shared/datetime.ts
+++ b/app/static_src/js/shared/datetime.ts
@@ -1,14 +1,16 @@
 // Replicating our Python datetime/helpers.py
 // TODO: NOTES: Dependency injection
-import { userStore } from './userStore.js';
+import { userStore } from './services/userStore.js';
 function nowUTC(): string {
     return new Date().toISOString(); // Returns "2025-08-17T15:02:33.022Z"
 }
-// debug: console.log(nowUTC())
-function formatTimeString(date: Date){
+export const getJSInstant = (): string =>
+    new Date().toISOString(); // Always UTC "..Z"
+export function formatTimeString(date: Date): string {
     // Use user timezone if available
     if (userStore.state === 'loaded') {
         // format using userStore.data.timezone
@@ -29,30 +31,20 @@ function formatTimeString(date: Date){
     }
 }
-export const getJSInstant = (): string =>
-    new Date().toISOString(); // Always UTC "..Z"
-export function formatDateString(date: Date) {
-    if (userStore.state === 'loaded') {
-        const formatter = new Intl.DateTimeFormat('en-CA', {
-            timeZone: userStore.data.timezone,
-            year: 'numeric',
-            month: '2-digit',
-            day: '2-digit'
-        });
-        return formatter.format(date);  // "2025-08-17"
-    } else {
-        // Fall back to browser timezone
-        return new Date().toISOString().split('T')[0];
-    }
-}
-function getCurrentTimeString() {
-    return formatTimeString(new Date());
-}
-function getCurrentDateString() {
-    return formatDateString(new Date());
-}
+// export function formatDateString(date: Date) {
+//     if (userStore.state === 'loaded') {
+//         const formatter = new Intl.DateTimeFormat('en-CA', {
+//             timeZone: userStore.data.timezone,
+//             year: 'numeric',
+//             month: '2-digit',
+//             day: '2-digit'
+//         });
+//         return formatter.format(date);  // "2025-08-17"
+//     } else {
+//         // Fall back to browser timezone
+//         return new Date().toISOString().split('T')[0];
+//     }
+// }
 function padTime(number: number): string {
     return number.toString().padStart(2, '0');
diff --git a/app/static_src/js/shared/navbar.js b/app/static_src/js/shared/navbar.js
index c0b09cc..1aff967 100644
--- a/app/static_src/js/shared/navbar.js
+++ b/app/static_src/js/shared/navbar.js
@@ -3,20 +3,23 @@
 // Safe to import in index.js (entry point for shared/)
 window.addEventListener('DOMContentLoaded', () => {
-    const navlinks = document.querySelector('.navlinks');
+    const mobilenavlinks = document.querySelector('#mobilenav');
     const modal = document.querySelector('#settings-modal');
     const mq = window.matchMedia('(max-width: 640px)'); // uses a media query obj in JS, syncs JS state with CSS breakpoint
     const hamburgerBtn = document.querySelector('#hamburger-btn');
     document.addEventListener('click', (e) => {
+        console.log(`Clicked: ${e.target.id}`)
         // Toggle mobile nav
         if (e.target.matches('#hamburger-btn')) {
-            navlinks?.classList.toggle('is-open'); // ? is the optional chaining operator
-            const isOpen = navlinks?.classList.contains('is-open'); // set proper bool for is-open state
+            mobilenavlinks?.classList.toggle('is-open');
+            const isOpen = mobilenavlinks?.classList.contains('is-open'); // set proper bool for is-open state
             hamburgerBtn.setAttribute('aria-expanded', String(isOpen)); // toggle aria-expanded value 
-            if (isOpen) navlinks.querySelector('a')?.focus(); // focus on first anchor el in nav
+            if (isOpen) mobilenavlinks.querySelector('a')?.focus(); // focus on first anchor el in nav
         }
+        // TODO: Auto-close mobile-nav upon click elsewhere
         // Open settings modal
         if (e.target.matches('#settings-btn')) {
             // Optional chaining avoids null errors if modal is missing
@@ -32,7 +35,7 @@ window.addEventListener('DOMContentLoaded', () => {
     mq.addEventListener('change', (e) => {
         // True when window <= 640px
         if (!e.matches) {
-            navlinks.classList.remove('is-open');
+            mobilenavlinks.classList.remove('is-open');
             hamburgerBtn.setAttribute('aria-expanded', 'false');
         }
     });
diff --git a/app/static_src/js/shared/services/userStore.js b/app/static_src/js/shared/services/userStore.js
index 0d26e13..e43d136 100644
--- a/app/static_src/js/shared/services/userStore.js
+++ b/app/static_src/js/shared/services/userStore.js
@@ -7,7 +7,7 @@
 // Idea is userStore can only be in one of four states at any time, and follows
 // specific rules about how to transition between states
-const userStore = {
+export const userStore = {
     data: null,
     state: 'not-loaded',
@@ -35,17 +35,4 @@ const userStore = {
             throw new Error(`Failed to fetch user data: ${response.status}`);
         }
     }
-}
-// Export to make available for import?
-// Needed for bundler method?
-export { userStore };
-// // Test it!
-// console.log('Initial state:', userStore.state);
-// console.log('Initial data:', userStore.data);
-// userStore.fetch().then(() => {
-//     console.log('After fetch - state:', userStore.state);
-//     console.log('After fetch - data:', userStore.data);
-// });
\ No newline at end of file
+}
\ No newline at end of file
diff --git a/app/static_src/js/shared/tables.js b/app/static_src/js/shared/tables.js
index 63a4f2d..98cc784 100644
--- a/app/static_src/js/shared/tables.js
+++ b/app/static_src/js/shared/tables.js
@@ -1,5 +1,19 @@
 // Bundler: Auto-runner => wires tables on DOMContentLoaded
 // Functions for our tables, such as editTableField or deleteTableItem?
+import { confirmationManager } from './ui/modal-manager.js';
+import { makeToast } from './ui/toast.js';
+/**
+ * Creates table row for given item data for realtime modal entries
+ * @param {Object} data - Return data from backend for new item
+ */
+export function makeTableRow(data) {
+    const row = document.createElement("tr");
+    // Build cells
+}
 // Currently used by tasks/dashboard & groceries/dashboard
 // DELETE fetch request when clicking delete button
@@ -11,11 +25,11 @@
  * @param {string} subtype 
  * @returns 
  */
-async function deleteTableItem(module, itemId, subtype = "none") { // Default to none if not passed
-    if (!confirm(`Are you sure you want to delete this item?`)) return;
+async function deleteTableItem(module, itemId, subtype = "none") {
+    const confirmed = await confirmationManager.show("Are you sure you want to delete this item?");
+    if (!confirmed) return;
-    // Construct URL dynamically based on module & itemId
-    const url = `/${module}/${subtype}/${itemId}`
+    const url = `/${module}/${subtype}/${itemId}`;
     try {
         const response = await fetch(url, {
@@ -25,58 +39,57 @@ async function deleteTableItem(module, itemId, subtype = "none") { // Default to
         const responseData = await response.json();
         if (responseData.success) {
-            // update DOM
             const itemRow = document.querySelector(`[data-item-id="${itemId}"]`);
             if (itemRow) itemRow.remove();
         } else {
-            // Route error
             console.error('Failed to delete item:', responseData.message);
         }
     } catch (error) {
-        // If fetch request as a whole failed (network/server errors)
         console.error('Fetch request failed: ', error);
     }
 }
 /** 
- * Inline table cell editing. Allows double-clicking table cells to edit values in place.
- * @param {HTMLElement} td - The table cell element
- * @param {string} module  - API module name for the update endpoint 
- * @param {string} field   - Field of table being updated
- * @param {string|number} itemId - ID of the item being updated 
+ * Enables inline editing of a DOM element's text content via a temporary input field.
+ * On blur or Enter key, input it replaced with text content.
+ * Returns the new value if it was changed, or null if unchanged.
+ * 
+ * @param {HTMLElement} element - Target element to enable inline editing for.
+ * @returns {Promise<string|null>} Resolves with the updated value, or null if unchanged.
  */
-// Allows us to double-click a table cell and change its value
-function editTableField(td, module, field, itemId, subtype) {
-    // alert(`Module: ${module}, Field: ${field}, ID: ${itemId}, Value: ${td.textContent}`);
+export async function inlineEditElement(element) {
+    const originalText = element.textContent.trim();
-    // 1. Create an input element to replace cell content
+    // Create input element with similar size to current text
     const input = document.createElement('input');
-    input.className = 'input-inline';
     input.type = 'text';
-    input.value = td.textContent;
-    // Clear the cell & append the input field
-    td.innerHTML = '';      // Clears the content of the dblclicked <td>
-    td.appendChild(input);  // Add the input field to the <td>
-    input.focus()           // Focus on the input field for editing
-    // Listen for blur (click away) or enter to save the update
-    // NOTE: Notice how we're adding another listener for hitting 'enter' below, which actually triggers blur
-    // Isolates the "real change" portion of our logic to only being in one place
-    //  what if the user hits enter AND clicks away in rapid succession?
-    input.addEventListener('blur', function() {
-        const td = this.parentElement; // 'this' = input element, so here we get the parent <td>
-        saveUpdatedField(module, field, itemId, input.value, td, subtype); // Pass td along with other data
-    });
+    input.className = 'input-inline';
+    input.value = originalText;
+    input.size = originalText.length + 2;
+    // Clear element & append input
+    element.textContent = '';
+    element.appendChild(input);
+    input.focus();
+    // Trigger save on blur or Enter key
+    // Note: Pressing Enter triggers a blur, so the change logic is centralized in handleFinish
+    return new Promise((resolve) => {
+        input.addEventListener('blur', handleFinish);
+        input.addEventListener('keydown', (e) => {
+            if (e.key === 'Enter') {
+                input.blur(); // trigger blur => handleFinish => resolve
+            }
+        });
-    input.addEventListener('keydown', function(event) {
-        if (event.key === 'Enter') {
-            input.blur(); // Trigger the blur event when Enter is pressed
+        function handleFinish() {
+            const newValue = input.value.trim();
+            element.textContent = newValue || originalText;
+            resolve(newValue !== originalText ? newValue : null);
         }
     });
 }
 // 1. Get the value from the input field (represents our edited title)
 // 2. Send it to the backend to update the task in the db
 // 3. Once updated, replace the input with the new title and hide the input field
@@ -106,7 +119,7 @@ async function saveUpdatedField(module, field, itemId, newValue, td, subtype = "
         const responseData = await response.json();
         if (responseData.success) {
-            updateFieldDisplay(td, newValue);
+            makeToast(responseData.message, 'success');
         } else {
             console.error('Error updating field:', responseData.message);
         }
@@ -115,83 +128,23 @@ async function saveUpdatedField(module, field, itemId, newValue, td, subtype = "
     }
 }
-// Another function to handle "clean up"
-// Remove the input field & display the new title after changes
-/**
- * Replaces input field with updated text display
- * @param {HTMLElement} td - Table cell containing the input
- * @param {string} newValue - Updated value to display
- */
-export function updateFieldDisplay(td, newValue) {
-    td.textContent = newValue;
-}
-/**
- * Handles delete button clicks using event delegation
- * @param {Event} e - Click event
- */
-function handleDeleteClick(e) {
-    // Handle clicks on delete button or its contents (SVG)
-    if (e.target.matches('.delete-btn') || e.target.closest('.delete-btn')) {
-        const row = e.target.closest('tr');
-        if (!row) return;
-        deleteTableItem(row.dataset.module, row.dataset.itemId, row.dataset.subtype)
-    }
-}
-/**
- * Handles double-click editing on table cells
- * To use: Add class 'editable-cell' on given cell
- * @param {Event} e - Double-click event
- */
-function handleEditClick(e) {
-    if (e.target.classList.contains('editable-cell')) {
-        const td = e.target;
-        editTableField(td, td.dataset.module, td.dataset.field, td.dataset.itemId, td.dataset.subtype)
-    }
-}
-// TODO: Implement real options here
-function handleCustomContextMenu(e) {
-    if (e.target.closest('.table-row')) {
-        // Accessing OR making our custom context menu
-        let menu = document.querySelector('.context-menu');
-        if (!menu) {
-            menu = document.createElement('ul');
-            const menuItems = ['Edit', 'Delete', 'Close'];
-            for (const item of menuItems) {
-                const menuItem = document.createElement('li');
-                menuItem.textContent = item;
-                menu.appendChild(menuItem);
-            }
-            menu.classList.add('context-menu');
-        }
-        // Position menu at cursor
-        menu.style.left = e.clientX + 'px';
-        menu.style.top = e.clientY + 'px';
-        menu.style.display = 'block';
-        document.body.appendChild(menu); // createElement adds to JS mem, appendChild to add to DOM
-    }
-}
 document.addEventListener('DOMContentLoaded', function() {
-    document.addEventListener('click', handleDeleteClick);
-    document.addEventListener('dblclick', handleEditClick);
-    document.addEventListener('contextmenu', (e) => {
-        if (e.ctrlKey) {
-            console.log('shift pressed!');
-            e.preventDefault();
-            handleCustomContextMenu(e); // TODO?: Pull our context menu handling into some kind of global.js
+    document.addEventListener('click', (e) => {
+        // Handle clicks on delete button or its contents (SVG)
+        if (e.target.matches('.delete-btn') || e.target.closest('.delete-btn')) {
+            const row = e.target.closest('tr');
+            if (!row) return;
+            deleteTableItem(row.dataset.module, row.dataset.itemId, row.dataset.subtype)
         }
     });
-    // Click away for context menu close
-    document.addEventListener('click', (e) => {
-        if (!e.target.matches('.context-menu')) {
-            const menu = document.querySelector('.context-menu');
-            menu?.remove();
+    document.addEventListener('dblclick', async (e) => {
+        // Handle double-click to edit table cell
+        if (e.target.classList.contains('editable-cell')) {
+            const td = e.target;
+            const newValue = await inlineEditElement(td);
+            if (newValue) {
+                await saveUpdatedField(td.dataset.module, td.dataset.field, td.dataset.itemId, newValue, td, td.dataset.subtype);
+            }
         }
     });
 });
\ No newline at end of file
diff --git a/app/static_src/js/shared/ui/modal-manager.js b/app/static_src/js/shared/ui/modal-manager.js
index d9cd614..cdaf637 100644
--- a/app/static_src/js/shared/ui/modal-manager.js
+++ b/app/static_src/js/shared/ui/modal-manager.js
@@ -33,7 +33,11 @@ modals.forEach(modal => {
         const endpoint = window.location.origin + modal.dataset.endpoint; // dialog's data-endpoint
         setupModal(fullId, buttonId, endpoint);
     }
-    console.log(`setupModal done for: ${modal.id}`);
+    // Set up tabbed modal handling based on naming conventions
+    if (modal.classList.contains('tabbed-modal') || modal.querySelector('.tabs')) {
+        setupTabbedModal(modal);
+    }
 });
 function setupModal(modalId, buttonId, endpoint) {
@@ -57,11 +61,35 @@ function setupModal(modalId, buttonId, endpoint) {
     modal.addEventListener('submit', async (e) => {
         e.preventDefault();
         const formData = new FormData(e.target);
-        console.log(`Submit event fired for modalId: ${modalId} with endpoint: ${endpoint}!`);
+        // console.log(`Submit event fired for modalId: ${modalId} with endpoint: ${endpoint}!`);
         submitModalForm(modal, endpoint, formData);
+        modal.querySelector('form').reset();
+        modal.close();
     });
 }
+function setupTabbedModal(modal) {
+    modal.querySelectorAll('.tabs button').forEach(btn => {
+        btn.addEventListener('click', () => {
+            console.log(`Button ${btn.dataset.tab} clicked`);
+            // hide all panels & remove active
+            document.querySelectorAll('.tabs button').forEach(b => b.classList.remove('active'));
+            document.querySelectorAll('.tab-content').forEach(p => p.hidden = true);
+            // show selected
+            const tabId = 'tab-' + btn.dataset.tab;
+            const panel = document.querySelector(`#${tabId}`);
+            if (panel) {
+                btn.classList.add('active');
+                panel.hidden = false;
+            };
+        });
+    });
+    // Auto-activate first tab
+    const firstTab = modal.querySelector('.tabs button');
+    firstTab?.click();
+}
 async function submitModalForm(modal, endpoint, formData) {
     try {
         const response = await fetch(endpoint, {
@@ -72,8 +100,6 @@ async function submitModalForm(modal, endpoint, formData) {
         if (responseData.success) {
             makeTableRow(responseData.data);
-            modal.querySelector('form').reset();
-            modal.close();
             makeToast(responseData.message, 'success');
         } else {
             console.error('Error:', responseData.message);
diff --git a/app/static_src/js/shared/ui/toast.js b/app/static_src/js/shared/ui/toast.js
index a86cbe2..cb74e99 100644
--- a/app/static_src/js/shared/ui/toast.js
+++ b/app/static_src/js/shared/ui/toast.js
@@ -36,7 +36,6 @@ class Toast {
 // Build DOM node for toast element with specified traits/properties
 // Receives message, then decides _how_ to display it only
 export function makeToast(message, type = 'info', duration = 1000) {
-    console.log('Make toast triggered!');
     const toast = new Toast(message, type).show();
     setTimeout(() => toast.hide(), duration); // auto-hide/fade
diff --git a/app/static_src/js/shared/ui/tooltip.js b/app/static_src/js/shared/ui/tooltip.js
index 90d2320..7e85cd2 100644
--- a/app/static_src/js/shared/ui/tooltip.js
+++ b/app/static_src/js/shared/ui/tooltip.js
@@ -9,7 +9,6 @@
 document.addEventListener('DOMContentLoaded', () => {
     const tooltipTriggers = document.querySelectorAll('.tooltip');
-    // debug console.log(`Found ${tooltipTriggers.length} triggers`);
     // Add listener to each tooltip
     tooltipTriggers.forEach(element => {
diff --git a/build.mjs b/build.mjs
index 9de92c2..6463442 100644
--- a/build.mjs
+++ b/build.mjs
@@ -33,6 +33,18 @@ if (isWatch) {
   await jsContext.watch();
   await cssContext.watch();
   console.log('[esbuild] Watching...')
+  process.on('SIGINT', async () => {
+    console.log('\n[esbuild] Cleaning up...');
+    await jsContext.dispose();
+    await cssContext.dispose();
+    process.exit(0);
+  });
+  process.on('SIGTERM', async () => {
+    await jsContext.dispose();
+    await cssContext.dispose();
+    process.exit(0);
+  });
 } else {
   const jsResult = await jsContext.rebuild();
   const cssResult = await cssContext.rebuild();
diff --git a/package.json b/package.json
index b2081f2..13d835e 100644
--- a/package.json
+++ b/package.json
@@ -23,7 +23,7 @@
     "build:watch": "node build.mjs --watch",
     "dev": "concurrently -k -p \"[{name}]\" -n esbuild,flask,sync \"npm:build:watch\" \"npm:flask:dev\" \"npm:sync\"",
     "flask:dev": "flask run --debug",
-    "sync": "wait-on tcp:127.0.0.1:5000 --timeout 5000 && browser-sync start --proxy http://127.0.0.1:5000 --port 5001 --files \"app/_templates/**/*.html, app/static_src/**/*\" --open local",
+    "sync": "wait-on tcp:127.0.0.1:5000 --timeout 5000 && browser-sync start --proxy http://127.0.0.1:5000 --port 5001 --files \"app/_templates/**/*.html, app/static_src/**/*\" --no-ui --open local",
     "typecheck": "tsc --noEmit",
     "lint": "eslint app/static_src/js",
     "lint:fix": "npm run ts:check && eslint app/static_src/js app/**/*.ts app/**/*.js --fix",
