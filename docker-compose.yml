# Uses existing container name & credentials
# Keeps current dbs we already have set up
services:
  # Adding web service here as well to serve as our personal use variant
  web:
    build:
      context: .
      dockerfile: Dockerfile.pi # Separate Dockerfile to avoid user add for dev deploy
    container_name: vesper-web
    restart: always
    ports:
      - "0.0.0.0:5000:5000" # accessible from network
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_ENV=development
    depends_on:
      - db
    # Bind mounting a file from the host filesystem into the container
    # This is different from copying! Here, the file lives on the host, but
    # a direct connection is created such that it appears inside the container
    volumes:
      - ${SEED_PATH}:/app/app/seed_dev_db.py

    #command: sleep infinity

  db:
    build:
      context: . # why the period here?
      dockerfile: Dockerfile.postgres
    container_name: vesper-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro # :ro is read-only, which is good practice for init scripts

volumes:
  pgdata:
    name: vesper-pgdata